[
  "Library: markupsafe",
  "__getattr__(name: 'str') -> 't.Any'",
  "escape(s: 't.Any', /) -> 'Markup'",
  "escape_silent(s: 't.Any | None', /) -> 'Markup'",
  "soft_str(s: 't.Any', /) -> 'str'",
  "EscapeFormatter",
  "Markup",
  "_HasHTML",
  "_MarkupEscapeHelper",
  "_TPEscape",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__getattr__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_escape_inner",
  "_speedups",
  "annotations",
  "cabc",
  "escape",
  "escape_silent",
  "soft_str",
  "string",
  "t",
  "Library: anyio",
  "aclose_forcefully(resource: 'AsyncResource') -> 'None'",
  "connect_tcp(remote_host: 'IPAddressType', remote_port: 'int', *, local_host: 'IPAddressType | None' = None, tls: 'bool' = False, ssl_context: 'ssl.SSLContext | None' = None, tls_standard_compatible: 'bool' = True, tls_hostname: 'str | None' = None, happy_eyeballs_delay: 'float' = 0.25) -> 'SocketStream | TLSStream'",
  "connect_unix(path: 'str | bytes | PathLike[Any]') -> 'UNIXSocketStream'",
  "create_connected_udp_socket(remote_host: 'IPAddressType', remote_port: 'int', *, family: 'AnyIPAddressFamily' = <AddressFamily.AF_UNSPEC: 0>, local_host: 'IPAddressType | None' = None, local_port: 'int' = 0, reuse_port: 'bool' = False) -> 'ConnectedUDPSocket'",
  "create_connected_unix_datagram_socket(remote_path: 'str | bytes | PathLike[Any]', *, local_path: 'None | str | bytes | PathLike[Any]' = None, local_mode: 'int | None' = None) -> 'ConnectedUNIXDatagramSocket'",
  "create_task_group() -> 'TaskGroup'",
  "create_tcp_listener(*, local_host: 'IPAddressType | None' = None, local_port: 'int' = 0, family: 'AnyIPAddressFamily' = <AddressFamily.AF_UNSPEC: 0>, backlog: 'int' = 65536, reuse_port: 'bool' = False) -> 'MultiListener[SocketStream]'",
  "create_udp_socket(family: 'AnyIPAddressFamily' = <AddressFamily.AF_UNSPEC: 0>, *, local_host: 'IPAddressType | None' = None, local_port: 'int' = 0, reuse_port: 'bool' = False) -> 'UDPSocket'",
  "create_unix_datagram_socket(*, local_path: 'None | str | bytes | PathLike[Any]' = None, local_mode: 'int | None' = None) -> 'UNIXDatagramSocket'",
  "create_unix_listener(path: 'str | bytes | PathLike[Any]', *, mode: 'int | None' = None, backlog: 'int' = 65536) -> 'SocketListener'",
  "current_effective_deadline() -> 'float'",
  "current_time() -> 'float'",
  "fail_after(delay: 'float | None', shield: 'bool' = False) -> 'Generator[CancelScope, None, None]'",
  "get_all_backends() -> 'tuple[str, ...]'",
  "get_cancelled_exc_class() -> 'type[BaseException]'",
  "get_current_task() -> 'TaskInfo'",
  "get_running_tasks() -> 'list[TaskInfo]'",
  "getaddrinfo(host: 'bytes | str | None', port: 'str | int | None', *, family: 'int | AddressFamily' = 0, type: 'int | SocketKind' = 0, proto: 'int' = 0, flags: 'int' = 0) -> 'list[tuple[AddressFamily, SocketKind, int, str, tuple[str, int]]]'",
  "getnameinfo(sockaddr: 'IPSockAddrType', flags: 'int' = 0) -> 'Awaitable[tuple[str, str]]'",
  "move_on_after(delay: 'float | None', shield: 'bool' = False) -> 'CancelScope'",
  "open_file(file: 'str | PathLike[str] | int', mode: 'str' = 'r', buffering: 'int' = -1, encoding: 'str | None' = None, errors: 'str | None' = None, newline: 'str | None' = None, closefd: 'bool' = True, opener: 'Callable[[str, int], int] | None' = None) -> 'AsyncFile[Any]'",
  "open_process(command: 'StrOrBytesPath | Sequence[StrOrBytesPath]', *, stdin: 'int | IO[Any] | None' = -1, stdout: 'int | IO[Any] | None' = -1, stderr: 'int | IO[Any] | None' = -1, cwd: 'StrOrBytesPath | None' = None, env: 'Mapping[str, str] | None' = None, startupinfo: 'Any' = None, creationflags: 'int' = 0, start_new_session: 'bool' = False, pass_fds: 'Sequence[int]' = (), user: 'str | int | None' = None, group: 'str | int | None' = None, extra_groups: 'Iterable[str | int] | None' = None, umask: 'int' = -1) -> 'Process'",
  "open_signal_receiver(*signals: 'Signals') -> 'AbstractContextManager[AsyncIterator[Signals]]'",
  "run(func: 'Callable[[Unpack[PosArgsT]], Awaitable[T_Retval]]', *args: 'Unpack[PosArgsT]', backend: 'str' = 'asyncio', backend_options: 'dict[str, Any] | None' = None) -> 'T_Retval'",
  "run_process(command: 'StrOrBytesPath | Sequence[StrOrBytesPath]', *, input: 'bytes | None' = None, stdout: 'int | IO[Any] | None' = -1, stderr: 'int | IO[Any] | None' = -1, check: 'bool' = True, cwd: 'StrOrBytesPath | None' = None, env: 'Mapping[str, str] | None' = None, startupinfo: 'Any' = None, creationflags: 'int' = 0, start_new_session: 'bool' = False, pass_fds: 'Sequence[int]' = (), user: 'str | int | None' = None, group: 'str | int | None' = None, extra_groups: 'Iterable[str | int] | None' = None, umask: 'int' = -1) -> 'CompletedProcess[bytes]'",
  "sleep(delay: 'float') -> 'None'",
  "sleep_forever() -> 'None'",
  "sleep_until(deadline: 'float') -> 'None'",
  "typed_attribute() -> 'Any'",
  "wait_all_tasks_blocked() -> 'None'",
  "wait_readable(obj: 'FileDescriptorLike') -> 'Awaitable[None]'",
  "wait_socket_readable(sock: 'socket.socket') -> 'Awaitable[None]'",
  "wait_socket_writable(sock: 'socket.socket') -> 'Awaitable[None]'",
  "wait_writable(obj: 'FileDescriptorLike') -> 'Awaitable[None]'",
  "wrap_file(file: 'IO[AnyStr]') -> 'AsyncFile[AnyStr]'",
  "AsyncFile",
  "BrokenResourceError",
  "BrokenWorkerIntepreter",
  "BrokenWorkerProcess",
  "BusyResourceError",
  "CancelScope",
  "CapacityLimiter",
  "CapacityLimiterStatistics",
  "ClosedResourceError",
  "Condition",
  "ConditionStatistics",
  "DelimiterNotFound",
  "EndOfStream",
  "Event",
  "EventStatistics",
  "IncompleteRead",
  "Lock",
  "LockStatistics",
  "Path",
  "ResourceGuard",
  "Semaphore",
  "SemaphoreStatistics",
  "TASK_STATUS_IGNORED",
  "TaskInfo",
  "TypedAttributeLookupError",
  "TypedAttributeProvider",
  "TypedAttributeSet",
  "WouldBlock",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_core",
  "abc",
  "aclose_forcefully",
  "annotations",
  "connect_tcp",
  "connect_unix",
  "create_connected_udp_socket",
  "create_connected_unix_datagram_socket",
  "create_memory_object_stream",
  "create_task_group",
  "create_tcp_listener",
  "create_udp_socket",
  "create_unix_datagram_socket",
  "create_unix_listener",
  "current_effective_deadline",
  "current_time",
  "fail_after",
  "from_thread",
  "get_all_backends",
  "get_cancelled_exc_class",
  "get_current_task",
  "get_running_tasks",
  "getaddrinfo",
  "getnameinfo",
  "lowlevel",
  "move_on_after",
  "open_file",
  "open_process",
  "open_signal_receiver",
  "run",
  "run_process",
  "sleep",
  "sleep_forever",
  "sleep_until",
  "streams",
  "to_thread",
  "typed_attribute",
  "wait_all_tasks_blocked",
  "wait_readable",
  "wait_socket_readable",
  "wait_socket_writable",
  "wait_writable",
  "wrap_file",
  "Library: anytree",
  "find(node, filter_=None, stop=None, maxlevel=None)",
  "find_by_attr(node, value, name='name', maxlevel=None)",
  "findall(node, filter_=None, stop=None, maxlevel=None, mincount=None, maxcount=None)",
  "findall_by_attr(node, value, name='name', maxlevel=None, mincount=None, maxcount=None)",
  "AbstractStyle",
  "AnyNode",
  "AsciiStyle",
  "ChildResolverError",
  "ContRoundStyle",
  "ContStyle",
  "CountError",
  "DoubleStyle",
  "LevelGroupOrderIter",
  "LevelOrderGroupIter",
  "LevelOrderIter",
  "LightNodeMixin",
  "LoopError",
  "Node",
  "NodeMixin",
  "PostOrderIter",
  "PreOrderIter",
  "RenderTree",
  "Resolver",
  "ResolverError",
  "RootResolverError",
  "SymlinkNode",
  "SymlinkNodeMixin",
  "TreeError",
  "WalkError",
  "Walker",
  "ZigZagGroupIter",
  "__author__",
  "__author_email__",
  "__builtins__",
  "__cached__",
  "__description__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__url__",
  "__version__",
  "cachedsearch",
  "config",
  "find",
  "find_by_attr",
  "findall",
  "findall_by_attr",
  "iterators",
  "node",
  "render",
  "resolver",
  "search",
  "util",
  "walker",
  "Library: asttokens",
  "supports_tokenless(node=None)",
  "ASTText",
  "ASTTokens",
  "LineNumbers",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "asttokens",
  "line_numbers",
  "supports_tokenless",
  "util",
  "Library: backports.tarfile",
  "_get_filtered_attrs(member, dest_path, for_data=True)",
  "_safe_print(s)",
  "calc_chksums(buf)",
  "copyfileobj(src, dst, length=None, exception=<class 'OSError'>, bufsize=None)",
  "data_filter(member, dest_path)",
  "fully_trusted_filter(member, dest_path)",
  "is_tarfile(name)",
  "itn(n, digits=8, format=2)",
  "main()",
  "nti(s)",
  "nts(s, encoding, errors)",
  "removesuffix(self, suffix)",
  "stn(s, length, encoding, errors)",
  "tar_filter(member, dest_path)",
  "AREGTYPE",
  "AbsoluteLinkError",
  "AbsolutePathError",
  "BLKTYPE",
  "BLOCKSIZE",
  "CHRTYPE",
  "CONTTYPE",
  "CompressionError",
  "DEFAULT_FORMAT",
  "DIRTYPE",
  "ENCODING",
  "EOFHeaderError",
  "EmptyHeaderError",
  "ExFileObject",
  "ExtractError",
  "FIFOTYPE",
  "FilterError",
  "GNUTYPE_LONGLINK",
  "GNUTYPE_LONGNAME",
  "GNUTYPE_SPARSE",
  "GNU_FORMAT",
  "GNU_MAGIC",
  "GNU_TYPES",
  "HeaderError",
  "InvalidHeaderError",
  "LENGTH_LINK",
  "LENGTH_NAME",
  "LENGTH_PREFIX",
  "LNKTYPE",
  "LinkOutsideDestinationError",
  "NUL",
  "OutsideDestinationError",
  "PAX_FIELDS",
  "PAX_FORMAT",
  "PAX_NAME_FIELDS",
  "PAX_NUMBER_FIELDS",
  "POSIX_MAGIC",
  "RECORDSIZE",
  "REGTYPE",
  "REGULAR_TYPES",
  "ReadError",
  "SOLARIS_XHDTYPE",
  "SUPPORTED_TYPES",
  "SYMTYPE",
  "SpecialFileError",
  "StreamError",
  "SubsequentHeaderError",
  "TarError",
  "TarFile",
  "TarInfo",
  "TruncatedHeaderError",
  "USTAR_FORMAT",
  "XGLTYPE",
  "XHDTYPE",
  "_FileInFile",
  "_KEEP",
  "_LowLevelFile",
  "_NAMED_FILTERS",
  "_Stream",
  "_StreamProxy",
  "__all__",
  "__author__",
  "__builtins__",
  "__cached__",
  "__credits__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_get_filtered_attrs",
  "_safe_print",
  "bltn_open",
  "calc_chksums",
  "compat",
  "copy",
  "copyfileobj",
  "data_filter",
  "fully_trusted_filter",
  "grp",
  "io",
  "is_tarfile",
  "itn",
  "main",
  "nti",
  "nts",
  "open",
  "os",
  "pwd",
  "re",
  "removesuffix",
  "shutil",
  "stat",
  "stn",
  "struct",
  "symlink_exception",
  "sys",
  "tar_filter",
  "time",
  "version",
  "Library: blinker",
  "ANY",
  "NamedSignal",
  "Namespace",
  "Signal",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_utilities",
  "annotations",
  "base",
  "default_namespace",
  "signal",
  "Library: build",
  "check_dependency(req_string: 'str', ancestral_req_strings: 'tuple[str, ...]' = (), parent_extras: 'Set[str]' = frozenset()) -> 'Iterator[tuple[str, ...]]'",
  "BuildBackendException",
  "BuildException",
  "BuildSystemTableValidationError",
  "ConfigSettingsType",
  "DistributionType",
  "FailedProcessError",
  "ProjectBuilder",
  "RunnerType",
  "TypoWarning",
  "__version__",
  "check_dependency",
  "Library: cachecontrol",
  "CacheControl(sess: 'requests.Session', cache: 'BaseCache | None' = None, cache_etags: 'bool' = True, serializer: 'Serializer | None' = None, heuristic: 'BaseHeuristic | None' = None, controller_class: 'type[CacheController] | None' = None, adapter_class: 'type[CacheControlAdapter] | None' = None, cacheable_methods: 'Collection[str] | None' = None) -> 'requests.Session'",
  "CacheControl",
  "CacheControlAdapter",
  "CacheController",
  "__all__",
  "__author__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__email__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "adapter",
  "cache",
  "controller",
  "filewrapper",
  "logging",
  "serialize",
  "wrapper",
  "Library: certifi",
  "contents() -> str",
  "where() -> str",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "contents",
  "core",
  "where",
  "Library: cleo",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "annotations",
  "Library: click",
  "argument(*param_decls: str, cls: Optional[Type[click.core.Argument]] = None, **attrs: Any) -> Callable[[~FC], ~FC]",
  "clear() -> None",
  "command(name: Union[str, NoneType, Callable[..., Any]] = None, cls: Optional[Type[~CmdType]] = None, **attrs: Any) -> Union[click.core.Command, Callable[[Callable[..., Any]], Union[click.core.Command, ~CmdType]]]",
  "confirm(text: str, default: Optional[bool] = False, abort: bool = False, prompt_suffix: str = ': ', show_default: bool = True, err: bool = False) -> bool",
  "confirmation_option(*param_decls: str, **kwargs: Any) -> Callable[[~FC], ~FC]",
  "echo(message: Optional[Any] = None, file: Optional[IO[Any]] = None, nl: bool = True, err: bool = False, color: Optional[bool] = None) -> None",
  "echo_via_pager(text_or_generator: Union[Iterable[str], Callable[[], Iterable[str]], str], color: Optional[bool] = None) -> None",
  "edit(text: Optional[~AnyStr] = None, editor: Optional[str] = None, env: Optional[Mapping[str, str]] = None, require_save: bool = True, extension: str = '.txt', filename: Optional[str] = None) -> Optional[~AnyStr]",
  "format_filename(filename: 't.Union[str, bytes, os.PathLike[str], os.PathLike[bytes]]', shorten: bool = False) -> str",
  "get_app_dir(app_name: str, roaming: bool = True, force_posix: bool = False) -> str",
  "get_binary_stream(name: \"te.Literal['stdin', 'stdout', 'stderr']\") -> <class 'BinaryIO'>",
  "get_current_context(silent: bool = False) -> Optional[ForwardRef('Context')]",
  "get_text_stream(name: \"te.Literal['stdin', 'stdout', 'stderr']\", encoding: Optional[str] = None, errors: Optional[str] = 'strict') -> <class 'TextIO'>",
  "getchar(echo: bool = False) -> str",
  "group(name: Union[str, Callable[..., Any], NoneType] = None, cls: Optional[Type[~GrpType]] = None, **attrs: Any) -> Union[click.core.Group, Callable[[Callable[..., Any]], Union[click.core.Group, ~GrpType]]]",
  "help_option(*param_decls: str, **kwargs: Any) -> Callable[[~FC], ~FC]",
  "launch(url: str, wait: bool = False, locate: bool = False) -> int",
  "make_pass_decorator(object_type: Type[~T], ensure: bool = False) -> Callable[[ForwardRef('t.Callable[te.Concatenate[T, P], R]')], ForwardRef('t.Callable[P, R]')]",
  "open_file(filename: Union[str, ForwardRef('os.PathLike[str]')], mode: str = 'r', encoding: Optional[str] = None, errors: Optional[str] = 'strict', lazy: bool = False, atomic: bool = False) -> IO[Any]",
  "option(*param_decls: str, cls: Optional[Type[click.core.Option]] = None, **attrs: Any) -> Callable[[~FC], ~FC]",
  "pass_context(f: 't.Callable[te.Concatenate[Context, P], R]') -> 't.Callable[P, R]'",
  "pass_obj(f: 't.Callable[te.Concatenate[t.Any, P], R]') -> 't.Callable[P, R]'",
  "password_option(*param_decls: str, **kwargs: Any) -> Callable[[~FC], ~FC]",
  "pause(info: Optional[str] = None, err: bool = False) -> None",
  "progressbar(iterable: Optional[Iterable[~V]] = None, length: Optional[int] = None, label: Optional[str] = None, show_eta: bool = True, show_percent: Optional[bool] = None, show_pos: bool = False, item_show_func: Optional[Callable[[Optional[~V]], Optional[str]]] = None, fill_char: str = '#', empty_char: str = '-', bar_template: str = '%(label)s  [%(bar)s]  %(info)s', info_sep: str = '  ', width: int = 36, file: Optional[TextIO] = None, color: Optional[bool] = None, update_min_steps: int = 1) -> 'ProgressBar[V]'",
  "prompt(text: str, default: Optional[Any] = None, hide_input: bool = False, confirmation_prompt: Union[bool, str] = False, type: Union[click.types.ParamType, Any, NoneType] = None, value_proc: Optional[Callable[[str], Any]] = None, prompt_suffix: str = ': ', show_default: bool = True, err: bool = False, show_choices: bool = True) -> Any",
  "secho(message: Optional[Any] = None, file: Optional[IO[~AnyStr]] = None, nl: bool = True, err: bool = False, color: Optional[bool] = None, **styles: Any) -> None",
  "style(text: Any, fg: Union[int, Tuple[int, int, int], str, NoneType] = None, bg: Union[int, Tuple[int, int, int], str, NoneType] = None, bold: Optional[bool] = None, dim: Optional[bool] = None, underline: Optional[bool] = None, overline: Optional[bool] = None, italic: Optional[bool] = None, blink: Optional[bool] = None, reverse: Optional[bool] = None, strikethrough: Optional[bool] = None, reset: bool = True) -> str",
  "unstyle(text: str) -> str",
  "version_option(version: Optional[str] = None, *param_decls: str, package_name: Optional[str] = None, prog_name: Optional[str] = None, message: Optional[str] = None, **kwargs: Any) -> Callable[[~FC], ~FC]",
  "wrap_text(text: str, width: int = 78, initial_indent: str = '', subsequent_indent: str = '', preserve_paragraphs: bool = False) -> str",
  "Abort",
  "Argument",
  "BOOL",
  "BadArgumentUsage",
  "BadOptionUsage",
  "BadParameter",
  "BaseCommand",
  "Choice",
  "ClickException",
  "Command",
  "CommandCollection",
  "Context",
  "DateTime",
  "FLOAT",
  "File",
  "FileError",
  "FloatRange",
  "Group",
  "HelpFormatter",
  "HelpOption",
  "INT",
  "IntRange",
  "MissingParameter",
  "MultiCommand",
  "NoSuchOption",
  "Option",
  "OptionParser",
  "ParamType",
  "Parameter",
  "Path",
  "STRING",
  "Tuple",
  "UNPROCESSED",
  "UUID",
  "UsageError",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_compat",
  "_winconsole",
  "argument",
  "clear",
  "command",
  "confirm",
  "confirmation_option",
  "core",
  "decorators",
  "echo",
  "echo_via_pager",
  "edit",
  "exceptions",
  "format_filename",
  "formatting",
  "get_app_dir",
  "get_binary_stream",
  "get_current_context",
  "get_text_stream",
  "getchar",
  "globals",
  "group",
  "help_option",
  "launch",
  "make_pass_decorator",
  "open_file",
  "option",
  "parser",
  "pass_context",
  "pass_obj",
  "password_option",
  "pause",
  "progressbar",
  "prompt",
  "secho",
  "style",
  "termui",
  "types",
  "unstyle",
  "utils",
  "version_option",
  "wrap_text",
  "Library: colorama",
  "colorama_text(*args, **kwargs)",
  "deinit()",
  "init(autoreset=False, convert=None, strip=None, wrap=True)",
  "just_fix_windows_console()",
  "reinit()",
  "AnsiToWin32",
  "Back",
  "Cursor",
  "Fore",
  "Style",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "ansi",
  "ansitowin32",
  "colorama_text",
  "deinit",
  "init",
  "initialise",
  "just_fix_windows_console",
  "reinit",
  "win32",
  "winterm",
  "Library: comm",
  "_create_comm(*args: 'Any', **kwargs: 'Any') -> 'BaseComm'",
  "_get_comm_manager() -> 'CommManager'",
  "create_comm(*args: 'Any', **kwargs: 'Any') -> 'BaseComm'",
  "get_comm_manager() -> 'CommManager'",
  "Any",
  "BaseComm",
  "BuffersType",
  "CommManager",
  "DummyComm",
  "MaybeDict",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_comm_manager",
  "_create_comm",
  "_get_comm_manager",
  "annotations",
  "base_comm",
  "create_comm",
  "get_comm_manager",
  "Library: crashtest",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "annotations",
  "Library: debugpy",
  "breakpoint() -> 'None'",
  "configure(__properties: 'dict[str, typing.Any] | None' = None, **kwargs) -> 'None'",
  "connect(__endpoint: 'Endpoint | int', *, access_token: 'str | None' = None) -> 'Endpoint'",
  "debug_this_thread() -> 'None'",
  "is_client_connected() -> 'bool'",
  "listen(__endpoint: 'Endpoint | int', *, in_process_debug_adapter: 'bool' = False) -> 'Endpoint'",
  "log_to(__path: 'str | typing.TextIO') -> 'None'",
  "trace_this_thread(__should_trace: 'bool')",
  "wait_for_client() -> 'None'",
  "Endpoint",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_version",
  "annotations",
  "breakpoint",
  "configure",
  "connect",
  "debug_this_thread",
  "functools",
  "is_client_connected",
  "listen",
  "log_to",
  "public_api",
  "trace_this_thread",
  "typing",
  "wait_for_client",
  "Library: decorator",
  "_contextmanager(g)",
  "append(a, vancestors)",
  "contextmanager(func)",
  "decorate(func, caller, extras=(), kwsyntax=False)",
  "decorator(caller, _func=None, kwsyntax=False)",
  "decoratorx(caller)",
  "dispatch_on(*dispatch_args)",
  "fix(args, kwargs, sig)",
  "getfullargspec(func)",
  "iscoroutinefunction(obj)",
  "isgeneratorfunction(obj)",
  "ContextManager",
  "DEF",
  "EMPTY",
  "FunctionMaker",
  "POS",
  "_GeneratorContextManager",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__spec__",
  "__version__",
  "_contextmanager",
  "append",
  "contextmanager",
  "decorate",
  "decorator",
  "decoratorx",
  "dispatch_on",
  "fix",
  "functools",
  "getfullargspec",
  "inspect",
  "iscoroutinefunction",
  "isgeneratorfunction",
  "itertools",
  "operator",
  "re",
  "sys",
  "Library: dfttools",
  "AFORCE(signal: str = 'VCC', reference: str = 'GND', value: float = 0.0)",
  "AFORCESWEEP(signal: str = 'VCC', reference: str = 'GND', initial_value: float = 0.0, end_value: float = 5.0, step: float = 0.1, step_time: float = 0.01)",
  "AMEASURE(signal: str = 'VCC', reference: str = 'GND', expected_value: int | float = 0.0)",
  "FREQFORCE(signal: str = 'VCC', reference: str = 'GND', value: float = 0.0)",
  "FREQFORCESWEEP(signal: str = 'CLK', reference: str = 'GND', initial_value: float = 0.0, end_value: float = 100.0, step: float = 1.0, step_time: float = 0.01)",
  "FREQMEASURE(signal: str = 'CLK', reference: str = 'GND', expected_value: int | float = 0.0)",
  "I2C_READ(device_address: int, field_info: dict, expected_value: int)",
  "I2C_WRITE(device_address: int, field_info: dict, write_value: int)",
  "RESFORCE(signal: str = 'VCC', reference: str = 'GND', value: float = 0.0)",
  "RESFORCESWEEP(signal: str = 'R1', reference: str = 'GND', initial_value: float = 0.0, end_value: float = 1000.0, step: float = 10.0, step_time: float = 0.01)",
  "RESMEASURE(signal: str = 'R1', reference: str = 'GND', expected_value: int | float = 0.0)",
  "VFORCE(signal: str = 'VCC', reference: str = 'GND', value: float = 0.0)",
  "VFORCESWEEP(signal: str = 'VCC', reference: str = 'GND', initial_value: float = 0.0, end_value: float = 5.0, step: float = 0.1, step_time: float = 0.01)",
  "VMEASURE(signal: str = 'VCC', reference: str = 'GND', expected_value: int | float = 0.0)",
  "apply_force_and_measure(g, signal, reference, force_type, *args, **kwargs)",
  "apply_force_and_measure_sweep(g, signal, reference, initial_value, end_value, step, step_time, force_type)",
  "apply_i2c_read_write(g, device_address: int, field_info: dict, operation: str, value: int = None)",
  "current_force_callback(g, signal, reference, value)",
  "current_force_sweep_callback(g, signal, reference, value)",
  "current_measure_callback(g, signal, reference)",
  "frequency_force_callback(g, signal, reference, value)",
  "frequency_force_sweep_callback(g, signal, reference, value)",
  "frequency_measure_callback(g, signal, reference)",
  "i2c_read_callback(device_address: int, register_address: int)",
  "i2c_write_callback(device_address: int, register_address: int, value: int)",
  "resistance_force_callback(g, signal, reference, value)",
  "resistance_force_sweep_callback(g, signal, reference, value)",
  "resistance_measure_callback(g, signal, reference)",
  "voltage_force_callback(g, signal, reference, value)",
  "voltage_force_sweep_callback(g, signal, reference, value)",
  "voltage_measure_callback(g, signal, reference)",
  "AFORCE",
  "AFORCESWEEP",
  "AMEASURE",
  "FREQFORCE",
  "FREQFORCESWEEP",
  "FREQMEASURE",
  "I2C_READ",
  "I2C_WRITE",
  "RESFORCE",
  "RESFORCESWEEP",
  "RESMEASURE",
  "VFORCE",
  "VFORCESWEEP",
  "VMEASURE",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "apply_force_and_measure",
  "apply_force_and_measure_sweep",
  "apply_i2c_read_write",
  "callbacks",
  "current_force_callback",
  "current_force_sweep_callback",
  "current_measure_callback",
  "frequency_force_callback",
  "frequency_force_sweep_callback",
  "frequency_measure_callback",
  "g",
  "glob",
  "hardware",
  "i2c_read_callback",
  "i2c_write_callback",
  "instructions",
  "resistance_force_callback",
  "resistance_force_sweep_callback",
  "resistance_measure_callback",
  "voltage_force_callback",
  "voltage_force_sweep_callback",
  "voltage_measure_callback",
  "Library: distlib",
  "DistlibException",
  "NullHandler",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "logger",
  "logging",
  "Library: dulwich",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "Library: executing",
  "cache(user_function)",
  "is_pytest_compatible() -> bool",
  "namedtuple(typename, field_names, *, rename=False, defaults=None, module=None)",
  "only(it)",
  "Executing",
  "NotOneValueFound",
  "Source",
  "_VersionInfo",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "__version_info__",
  "_exceptions",
  "_position_node_finder",
  "_pytest_utils",
  "cache",
  "executing",
  "future_flags",
  "is_pytest_compatible",
  "namedtuple",
  "only",
  "version",
  "Library: fastjsonschema",
  "_factory(definition, handlers, formats={}, use_default=True, use_formats=True, detailed_exceptions=True)",
  "_get_code_generator_class(schema)",
  "compile(definition, handlers={}, formats={}, use_default=True, use_formats=True, detailed_exceptions=True)",
  "compile_to_code(definition, handlers={}, formats={}, use_default=True, use_formats=True, detailed_exceptions=True)",
  "update_wrapper(wrapper, wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))",
  "validate(definition, data, handlers={}, formats={}, use_default=True, use_formats=True, detailed_exceptions=True)",
  "CodeGeneratorDraft04",
  "CodeGeneratorDraft06",
  "CodeGeneratorDraft07",
  "JsonSchemaDefinitionException",
  "JsonSchemaException",
  "JsonSchemaValueException",
  "RefResolver",
  "VERSION",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_factory",
  "_get_code_generator_class",
  "compile",
  "compile_to_code",
  "draft04",
  "draft06",
  "draft07",
  "exceptions",
  "generator",
  "indent",
  "partial",
  "ref_resolver",
  "update_wrapper",
  "validate",
  "version",
  "Library: filelock",
  "AcquireReturnProxy",
  "AsyncAcquireReturnProxy",
  "AsyncFileLock",
  "AsyncSoftFileLock",
  "AsyncUnixFileLock",
  "AsyncWindowsFileLock",
  "BaseAsyncFileLock",
  "BaseFileLock",
  "FileLock",
  "SoftFileLock",
  "TYPE_CHECKING",
  "Timeout",
  "UnixFileLock",
  "WindowsFileLock",
  "_AsyncFileLock",
  "_FileLock",
  "__all__",
  "__annotations__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_api",
  "_error",
  "_soft",
  "_unix",
  "_util",
  "_windows",
  "annotations",
  "asyncio",
  "has_fcntl",
  "sys",
  "version",
  "warnings",
  "Library: findpython",
  "find(*args, **kwargs) -> 'PythonVersion | None'",
  "find_all(*args, **kwargs) -> 'list[PythonVersion]'",
  "register_provider(provider: 'P') -> 'P'",
  "ALL_PROVIDERS",
  "BaseProvider",
  "Finder",
  "PythonVersion",
  "TYPE_CHECKING",
  "TypeVar",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "annotations",
  "find",
  "find_all",
  "finder",
  "providers",
  "python",
  "register_provider",
  "utils",
  "Library: flask",
  "__getattr__(name: 'str') -> 't.Any'",
  "abort(code: 'int | BaseResponse', *args: 't.Any', **kwargs: 't.Any') -> 't.NoReturn'",
  "after_this_request(f: 'ft.AfterRequestCallable[t.Any]') -> 'ft.AfterRequestCallable[t.Any]'",
  "copy_current_request_context(f: 'F') -> 'F'",
  "flash(message: 'str', category: 'str' = 'message') -> 'None'",
  "get_flashed_messages(with_categories: 'bool' = False, category_filter: 't.Iterable[str]' = ()) -> 'list[str] | list[tuple[str, str]]'",
  "get_template_attribute(template_name: 'str', attribute: 'str') -> 't.Any'",
  "has_app_context() -> 'bool'",
  "has_request_context() -> 'bool'",
  "jsonify(*args: 't.Any', **kwargs: 't.Any') -> 'Response'",
  "make_response(*args: 't.Any') -> 'Response'",
  "redirect(location: 'str', code: 'int' = 302, Response: 'type[BaseResponse] | None' = None) -> 'BaseResponse'",
  "render_template(template_name_or_list: 'str | Template | list[str | Template]', **context: 't.Any') -> 'str'",
  "render_template_string(source: 'str', **context: 't.Any') -> 'str'",
  "send_file(path_or_file: 'os.PathLike[t.AnyStr] | str | t.BinaryIO', mimetype: 'str | None' = None, as_attachment: 'bool' = False, download_name: 'str | None' = None, conditional: 'bool' = True, etag: 'bool | str' = True, last_modified: 'datetime | int | float | None' = None, max_age: 'None | (int | t.Callable[[str | None], int | None])' = None) -> 'Response'",
  "send_from_directory(directory: 'os.PathLike[str] | str', path: 'os.PathLike[str] | str', **kwargs: 't.Any') -> 'Response'",
  "stream_template(template_name_or_list: 'str | Template | list[str | Template]', **context: 't.Any') -> 't.Iterator[str]'",
  "stream_template_string(source: 'str', **context: 't.Any') -> 't.Iterator[str]'",
  "stream_with_context(generator_or_function: 't.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]]') -> 't.Iterator[t.AnyStr] | t.Callable[[t.Iterator[t.AnyStr]], t.Iterator[t.AnyStr]]'",
  "url_for(endpoint: 'str', *, _anchor: 'str | None' = None, _method: 'str | None' = None, _scheme: 'str | None' = None, _external: 'bool | None' = None, **values: 't.Any') -> 'str'",
  "Blueprint",
  "Config",
  "Flask",
  "Request",
  "Response",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__getattr__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "abort",
  "after_this_request",
  "annotations",
  "app",
  "appcontext_popped",
  "appcontext_pushed",
  "appcontext_tearing_down",
  "before_render_template",
  "blueprints",
  "cli",
  "config",
  "copy_current_request_context",
  "ctx",
  "current_app",
  "flash",
  "g",
  "get_flashed_messages",
  "get_template_attribute",
  "globals",
  "got_request_exception",
  "has_app_context",
  "has_request_context",
  "helpers",
  "json",
  "jsonify",
  "logging",
  "make_response",
  "message_flashed",
  "redirect",
  "render_template",
  "render_template_string",
  "request",
  "request_finished",
  "request_started",
  "request_tearing_down",
  "sansio",
  "send_file",
  "send_from_directory",
  "session",
  "sessions",
  "signals",
  "stream_template",
  "stream_template_string",
  "stream_with_context",
  "t",
  "template_rendered",
  "templating",
  "typing",
  "url_for",
  "wrappers",
  "Library: h11",
  "CLIENT",
  "CLOSED",
  "Connection",
  "ConnectionClosed",
  "DONE",
  "Data",
  "ERROR",
  "EndOfMessage",
  "Event",
  "IDLE",
  "InformationalResponse",
  "LocalProtocolError",
  "MIGHT_SWITCH_PROTOCOL",
  "MUST_CLOSE",
  "NEED_DATA",
  "PAUSED",
  "PRODUCT_ID",
  "ProtocolError",
  "RemoteProtocolError",
  "Request",
  "Response",
  "SEND_BODY",
  "SEND_RESPONSE",
  "SERVER",
  "SWITCHED_PROTOCOL",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_abnf",
  "_connection",
  "_events",
  "_headers",
  "_readers",
  "_receivebuffer",
  "_state",
  "_util",
  "_version",
  "_writers",
  "Library: httpcore",
  "default_ssl_context() -> ssl.SSLContext",
  "request(method: 'bytes | str', url: 'URL | bytes | str', *, headers: 'HeaderTypes' = None, content: 'bytes | typing.Iterator[bytes] | None' = None, extensions: 'Extensions | None' = None) -> 'Response'",
  "stream(method: 'bytes | str', url: 'URL | bytes | str', *, headers: 'HeaderTypes' = None, content: 'bytes | typing.Iterator[bytes] | None' = None, extensions: 'Extensions | None' = None) -> 'typing.Iterator[Response]'",
  "AnyIOBackend",
  "AsyncConnectionInterface",
  "AsyncConnectionPool",
  "AsyncHTTP11Connection",
  "AsyncHTTP2Connection",
  "AsyncHTTPConnection",
  "AsyncHTTPProxy",
  "AsyncMockBackend",
  "AsyncMockStream",
  "AsyncNetworkBackend",
  "AsyncNetworkStream",
  "AsyncSOCKSProxy",
  "ConnectError",
  "ConnectTimeout",
  "ConnectionInterface",
  "ConnectionNotAvailable",
  "ConnectionPool",
  "HTTP11Connection",
  "HTTP2Connection",
  "HTTPConnection",
  "HTTPProxy",
  "LocalProtocolError",
  "MockBackend",
  "MockStream",
  "NetworkBackend",
  "NetworkError",
  "NetworkStream",
  "Origin",
  "PoolTimeout",
  "ProtocolError",
  "Proxy",
  "ProxyError",
  "ReadError",
  "ReadTimeout",
  "RemoteProtocolError",
  "Request",
  "Response",
  "SOCKET_OPTION",
  "SOCKSProxy",
  "SyncBackend",
  "TimeoutException",
  "TrioBackend",
  "URL",
  "UnsupportedProtocol",
  "WriteError",
  "WriteTimeout",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__locals",
  "__name",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_api",
  "_async",
  "_backends",
  "_exceptions",
  "_models",
  "_ssl",
  "_sync",
  "_synchronization",
  "_trace",
  "_utils",
  "default_ssl_context",
  "request",
  "stream",
  "Library: httpx",
  "create_ssl_context(verify: 'ssl.SSLContext | str | bool' = True, cert: 'CertTypes | None' = None, trust_env: 'bool' = True) -> 'ssl.SSLContext'",
  "delete(url: 'URL | str', *, params: 'QueryParamTypes | None' = None, headers: 'HeaderTypes | None' = None, cookies: 'CookieTypes | None' = None, auth: 'AuthTypes | None' = None, proxy: 'ProxyTypes | None' = None, follow_redirects: 'bool' = False, timeout: 'TimeoutTypes' = Timeout(timeout=5.0), verify: 'ssl.SSLContext | str | bool' = True, trust_env: 'bool' = True) -> 'Response'",
  "get(url: 'URL | str', *, params: 'QueryParamTypes | None' = None, headers: 'HeaderTypes | None' = None, cookies: 'CookieTypes | None' = None, auth: 'AuthTypes | None' = None, proxy: 'ProxyTypes | None' = None, follow_redirects: 'bool' = False, verify: 'ssl.SSLContext | str | bool' = True, timeout: 'TimeoutTypes' = Timeout(timeout=5.0), trust_env: 'bool' = True) -> 'Response'",
  "head(url: 'URL | str', *, params: 'QueryParamTypes | None' = None, headers: 'HeaderTypes | None' = None, cookies: 'CookieTypes | None' = None, auth: 'AuthTypes | None' = None, proxy: 'ProxyTypes | None' = None, follow_redirects: 'bool' = False, verify: 'ssl.SSLContext | str | bool' = True, timeout: 'TimeoutTypes' = Timeout(timeout=5.0), trust_env: 'bool' = True) -> 'Response'",
  "main() -> None",
  "options(url: 'URL | str', *, params: 'QueryParamTypes | None' = None, headers: 'HeaderTypes | None' = None, cookies: 'CookieTypes | None' = None, auth: 'AuthTypes | None' = None, proxy: 'ProxyTypes | None' = None, follow_redirects: 'bool' = False, verify: 'ssl.SSLContext | str | bool' = True, timeout: 'TimeoutTypes' = Timeout(timeout=5.0), trust_env: 'bool' = True) -> 'Response'",
  "patch(url: 'URL | str', *, content: 'RequestContent | None' = None, data: 'RequestData | None' = None, files: 'RequestFiles | None' = None, json: 'typing.Any | None' = None, params: 'QueryParamTypes | None' = None, headers: 'HeaderTypes | None' = None, cookies: 'CookieTypes | None' = None, auth: 'AuthTypes | None' = None, proxy: 'ProxyTypes | None' = None, follow_redirects: 'bool' = False, verify: 'ssl.SSLContext | str | bool' = True, timeout: 'TimeoutTypes' = Timeout(timeout=5.0), trust_env: 'bool' = True) -> 'Response'",
  "post(url: 'URL | str', *, content: 'RequestContent | None' = None, data: 'RequestData | None' = None, files: 'RequestFiles | None' = None, json: 'typing.Any | None' = None, params: 'QueryParamTypes | None' = None, headers: 'HeaderTypes | None' = None, cookies: 'CookieTypes | None' = None, auth: 'AuthTypes | None' = None, proxy: 'ProxyTypes | None' = None, follow_redirects: 'bool' = False, verify: 'ssl.SSLContext | str | bool' = True, timeout: 'TimeoutTypes' = Timeout(timeout=5.0), trust_env: 'bool' = True) -> 'Response'",
  "put(url: 'URL | str', *, content: 'RequestContent | None' = None, data: 'RequestData | None' = None, files: 'RequestFiles | None' = None, json: 'typing.Any | None' = None, params: 'QueryParamTypes | None' = None, headers: 'HeaderTypes | None' = None, cookies: 'CookieTypes | None' = None, auth: 'AuthTypes | None' = None, proxy: 'ProxyTypes | None' = None, follow_redirects: 'bool' = False, verify: 'ssl.SSLContext | str | bool' = True, timeout: 'TimeoutTypes' = Timeout(timeout=5.0), trust_env: 'bool' = True) -> 'Response'",
  "request(method: 'str', url: 'URL | str', *, params: 'QueryParamTypes | None' = None, content: 'RequestContent | None' = None, data: 'RequestData | None' = None, files: 'RequestFiles | None' = None, json: 'typing.Any | None' = None, headers: 'HeaderTypes | None' = None, cookies: 'CookieTypes | None' = None, auth: 'AuthTypes | None' = None, proxy: 'ProxyTypes | None' = None, timeout: 'TimeoutTypes' = Timeout(timeout=5.0), follow_redirects: 'bool' = False, verify: 'ssl.SSLContext | str | bool' = True, trust_env: 'bool' = True) -> 'Response'",
  "stream(method: 'str', url: 'URL | str', *, params: 'QueryParamTypes | None' = None, content: 'RequestContent | None' = None, data: 'RequestData | None' = None, files: 'RequestFiles | None' = None, json: 'typing.Any | None' = None, headers: 'HeaderTypes | None' = None, cookies: 'CookieTypes | None' = None, auth: 'AuthTypes | None' = None, proxy: 'ProxyTypes | None' = None, timeout: 'TimeoutTypes' = Timeout(timeout=5.0), follow_redirects: 'bool' = False, verify: 'ssl.SSLContext | str | bool' = True, trust_env: 'bool' = True) -> 'typing.Iterator[Response]'",
  "ASGITransport",
  "AsyncBaseTransport",
  "AsyncByteStream",
  "AsyncClient",
  "AsyncHTTPTransport",
  "Auth",
  "BaseTransport",
  "BasicAuth",
  "ByteStream",
  "Client",
  "CloseError",
  "ConnectError",
  "ConnectTimeout",
  "CookieConflict",
  "Cookies",
  "DecodingError",
  "DigestAuth",
  "HTTPError",
  "HTTPStatusError",
  "HTTPTransport",
  "Headers",
  "InvalidURL",
  "Limits",
  "LocalProtocolError",
  "MockTransport",
  "NetRCAuth",
  "NetworkError",
  "PoolTimeout",
  "ProtocolError",
  "Proxy",
  "ProxyError",
  "QueryParams",
  "ReadError",
  "ReadTimeout",
  "RemoteProtocolError",
  "Request",
  "RequestError",
  "RequestNotRead",
  "Response",
  "ResponseNotRead",
  "StreamClosed",
  "StreamConsumed",
  "StreamError",
  "SyncByteStream",
  "Timeout",
  "TimeoutException",
  "TooManyRedirects",
  "TransportError",
  "URL",
  "USE_CLIENT_DEFAULT",
  "UnsupportedProtocol",
  "WSGITransport",
  "WriteError",
  "WriteTimeout",
  "__all__",
  "__builtins__",
  "__cached__",
  "__description__",
  "__doc__",
  "__file__",
  "__loader__",
  "__locals",
  "__name",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__title__",
  "__version__",
  "_api",
  "_auth",
  "_client",
  "_config",
  "_content",
  "_decoders",
  "_exceptions",
  "_models",
  "_multipart",
  "_status_codes",
  "_transports",
  "_types",
  "_urlparse",
  "_urls",
  "_utils",
  "codes",
  "create_ssl_context",
  "delete",
  "get",
  "head",
  "main",
  "options",
  "patch",
  "post",
  "put",
  "request",
  "stream",
  "Library: idna",
  "alabel(label: str) -> bytes",
  "check_bidi(label: str, check_ltr: bool = False) -> bool",
  "check_hyphen_ok(label: str) -> bool",
  "check_initial_combiner(label: str) -> bool",
  "check_label(label: Union[str, bytes, bytearray]) -> None",
  "check_nfc(label: str) -> None",
  "decode(s: Union[str, bytes, bytearray], strict: bool = False, uts46: bool = False, std3_rules: bool = False) -> str",
  "encode(s: Union[str, bytes, bytearray], strict: bool = False, uts46: bool = False, std3_rules: bool = False, transitional: bool = False) -> bytes",
  "intranges_contain(int_: int, ranges: Tuple[int, ...]) -> bool",
  "ulabel(label: Union[str, bytes, bytearray]) -> str",
  "uts46_remap(domain: str, std3_rules: bool = True, transitional: bool = False) -> str",
  "valid_contextj(label: str, pos: int) -> bool",
  "valid_contexto(label: str, pos: int, exception: bool = False) -> bool",
  "valid_label_length(label: Union[bytes, str]) -> bool",
  "valid_string_length(label: Union[bytes, str], trailing_dot: bool) -> bool",
  "IDNABidiError",
  "IDNAError",
  "InvalidCodepoint",
  "InvalidCodepointContext",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "alabel",
  "check_bidi",
  "check_hyphen_ok",
  "check_initial_combiner",
  "check_label",
  "check_nfc",
  "core",
  "decode",
  "encode",
  "idnadata",
  "intranges",
  "intranges_contain",
  "package_data",
  "ulabel",
  "uts46_remap",
  "valid_contextj",
  "valid_contexto",
  "valid_label_length",
  "valid_string_length",
  "Library: installer",
  "install(source: installer.sources.WheelSource, destination: installer.destinations.WheelDestination, additional_metadata: Dict[str, bytes]) -> None",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_core",
  "_scripts",
  "destinations",
  "exceptions",
  "install",
  "records",
  "scripts",
  "sources",
  "utils",
  "Library: ipykernel",
  "connect_qtconsole(connection_file: 'str | None' = None, argv: 'list[str] | None' = None) -> 'Popen[Any]'",
  "get_connection_file(app: 'IPKernelApp | None' = None) -> 'str'",
  "get_connection_info(connection_file: 'str | None' = None, unpack: 'bool' = False) -> 'str | dict[str, Any]'",
  "write_connection_file(fname: 'str | None' = None, shell_port: 'int' = 0, iopub_port: 'int' = 0, stdin_port: 'int' = 0, hb_port: 'int' = 0, control_port: 'int' = 0, ip: 'str' = '', key: 'bytes' = b'', transport: 'str' = 'tcp', signature_scheme: 'str' = 'hmac-sha256', kernel_name: 'str' = '', **kwargs: 'Any') -> 'tuple[str, KernelConnectionInfo]'",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_version",
  "connect",
  "connect_qtconsole",
  "get_connection_file",
  "get_connection_info",
  "kernel_protocol_version",
  "kernel_protocol_version_info",
  "version_info",
  "write_connection_file",
  "Library: itsdangerous",
  "__getattr__(name: 'str') -> 't.Any'",
  "base64_decode(string: 'str | bytes') -> 'bytes'",
  "base64_encode(string: 'str | bytes') -> 'bytes'",
  "want_bytes(s: 'str | bytes', encoding: 'str' = 'utf-8', errors: 'str' = 'strict') -> 'bytes'",
  "BadData",
  "BadHeader",
  "BadPayload",
  "BadSignature",
  "BadTimeSignature",
  "HMACAlgorithm",
  "NoneAlgorithm",
  "Serializer",
  "SignatureExpired",
  "Signer",
  "TimedSerializer",
  "TimestampSigner",
  "URLSafeSerializer",
  "URLSafeTimedSerializer",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__getattr__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_json",
  "annotations",
  "base64_decode",
  "base64_encode",
  "encoding",
  "exc",
  "serializer",
  "signer",
  "t",
  "timed",
  "url_safe",
  "want_bytes",
  "Library: jaraco.classes",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "Library: jaraco.context",
  "_compose(*cmgrs)",
  "pushd(dir: 'str | os.PathLike') -> 'Iterator[str | os.PathLike]'",
  "remove_readonly(func, path, exc_info)",
  "repo_context(url, branch: 'str | None' = None, quiet: 'bool' = True, dest_ctx=functools.partial(<function temp_dir at 0x0000018323614040>, remover=functools.partial(<function rmtree at 0x00000183215E02C0>, onerror=<function remove_readonly at 0x0000018323613CE0>)))",
  "robust_remover()",
  "strip_first_component(member: 'tarfile.TarInfo', path) -> 'tarfile.TarInfo'",
  "tarball(url, target_dir: 'str | os.PathLike | None' = None) -> 'Iterator[str | os.PathLike]'",
  "tarball_cwd(*args, **kwargs)",
  "temp_dir(remover=<function rmtree at 0x00000183215E02C0>)",
  "ExceptionTrap",
  "Iterator",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_compose",
  "annotations",
  "contextlib",
  "errno",
  "functools",
  "on_interrupt",
  "operator",
  "os",
  "platform",
  "pushd",
  "remove_readonly",
  "repo_context",
  "robust_remover",
  "robust_temp_dir",
  "shutil",
  "stat",
  "strip_first_component",
  "subprocess",
  "suppress",
  "sys",
  "tarball",
  "tarball_cwd",
  "tarfile",
  "temp_dir",
  "tempfile",
  "urllib",
  "Library: jaraco.functools",
  "_(args: 'collections.abc.Mapping', func)",
  "_special_method_cache(method, cache_wrapper)",
  "_splat_inner(args, func)",
  "apply(transform)",
  "assign_params(func, namespace)",
  "bypass_unless(check)",
  "bypass_when(check, *, _op=<function identity at 0x0000018321D26C00>)",
  "chainable(method: 'Callable[[_T, ...], None]') -> 'Callable[[_T, ...], _T]'",
  "compose(*funcs)",
  "except_(*exceptions, replace=None, use=None)",
  "first_invoke(func1, func2)",
  "identity(x)",
  "invoke(f, /, *args, **kwargs)",
  "method_cache(method, cache_wrapper=<function lru_cache.<locals>.decorating_function at 0x0000018321CB19E0>)",
  "method_caller(*args, **kwargs)",
  "once(func)",
  "pass_none(func)",
  "print_yielded(func)",
  "result_invoke(action)",
  "retry(*r_args, **r_kwargs)",
  "retry_call(func, cleanup=<function <lambda> at 0x0000018321D26700>, retries=0, trap=())",
  "save_method_args(method)",
  "splat(func)",
  "Callable",
  "Throttler",
  "TypeVar",
  "_",
  "_T",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_special_method_cache",
  "_splat_inner",
  "annotations",
  "apply",
  "assign_params",
  "bypass_unless",
  "bypass_when",
  "chainable",
  "collections",
  "compose",
  "except_",
  "first_invoke",
  "functools",
  "identity",
  "inspect",
  "invoke",
  "itertools",
  "method_cache",
  "method_caller",
  "more_itertools",
  "once",
  "operator",
  "pass_none",
  "print_yielded",
  "result_invoke",
  "retry",
  "retry_call",
  "save_method_args",
  "splat",
  "time",
  "types",
  "warnings",
  "Library: jedi",
  "create_environment(path, *, safe=True, env_vars=None)",
  "find_system_environments(*, env_vars=None)",
  "find_virtualenvs(paths=None, *, safe=True, use_environment_vars=True)",
  "get_default_environment()",
  "get_default_project(path=None)",
  "get_system_environment(version, *, env_vars=None)",
  "preload_module(*modules)",
  "set_debug_function(func_cb=<function print_to_stdout at 0x000001832509D760>, warnings=True, notices=True, speed=True)",
  "InternalError",
  "Interpreter",
  "InterpreterEnvironment",
  "InvalidPythonEnvironment",
  "Project",
  "RefactoringError",
  "Script",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_compatibility",
  "api",
  "cache",
  "common",
  "create_environment",
  "debug",
  "file_io",
  "find_system_environments",
  "find_virtualenvs",
  "get_default_environment",
  "get_default_project",
  "get_system_environment",
  "inference",
  "parser_utils",
  "plugins",
  "preload_module",
  "set_debug_function",
  "settings",
  "Library: jinja2",
  "clear_caches() -> None",
  "is_undefined(obj: Any) -> bool",
  "make_logging_undefined(logger: Optional[ForwardRef('logging.Logger')] = None, base: Type[jinja2.runtime.Undefined] = <class 'jinja2.runtime.Undefined'>) -> Type[jinja2.runtime.Undefined]",
  "pass_context(f: ~F) -> ~F",
  "pass_environment(f: ~F) -> ~F",
  "pass_eval_context(f: ~F) -> ~F",
  "select_autoescape(enabled_extensions: Collection[str] = ('html', 'htm', 'xml'), disabled_extensions: Collection[str] = (), default_for_string: bool = True, default: bool = False) -> Callable[[Optional[str]], bool]",
  "BaseLoader",
  "BytecodeCache",
  "ChainableUndefined",
  "ChoiceLoader",
  "DebugUndefined",
  "DictLoader",
  "Environment",
  "FileSystemBytecodeCache",
  "FileSystemLoader",
  "FunctionLoader",
  "MemcachedBytecodeCache",
  "ModuleLoader",
  "PackageLoader",
  "PrefixLoader",
  "StrictUndefined",
  "Template",
  "TemplateAssertionError",
  "TemplateError",
  "TemplateNotFound",
  "TemplateRuntimeError",
  "TemplateSyntaxError",
  "TemplatesNotFound",
  "Undefined",
  "UndefinedError",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_identifier",
  "async_utils",
  "bccache",
  "clear_caches",
  "compiler",
  "defaults",
  "environment",
  "exceptions",
  "filters",
  "idtracking",
  "is_undefined",
  "lexer",
  "loaders",
  "make_logging_undefined",
  "nodes",
  "optimizer",
  "parser",
  "pass_context",
  "pass_environment",
  "pass_eval_context",
  "runtime",
  "select_autoescape",
  "tests",
  "utils",
  "visitor",
  "Library: keyring",
  "delete_password(service_name: str, username: str) -> None",
  "get_credential(service_name: str, username: Optional[str]) -> Optional[keyring.credentials.Credential]",
  "get_keyring() -> keyring.backend.KeyringBackend",
  "get_password(service_name: str, username: str) -> Optional[str]",
  "set_keyring(keyring: keyring.backend.KeyringBackend) -> None",
  "set_password(service_name: str, username: str, password: str) -> None",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "backend",
  "backends",
  "compat",
  "core",
  "credentials",
  "delete_password",
  "errors",
  "get_credential",
  "get_keyring",
  "get_password",
  "set_keyring",
  "set_password",
  "util",
  "Library: msgpack",
  "dump(o, stream, **kwargs)",
  "dumps(o, **kwargs)",
  "load(stream, **kwargs)",
  "pack(o, stream, **kwargs)",
  "packb(o, **kwargs)",
  "unpack(stream, **kwargs)",
  "BufferFull",
  "ExtType",
  "ExtraData",
  "FormatError",
  "OutOfData",
  "PackException",
  "PackOverflowError",
  "PackValueError",
  "Packer",
  "StackError",
  "Timestamp",
  "UnpackException",
  "UnpackValueError",
  "Unpacker",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_cmsgpack",
  "dump",
  "dumps",
  "exceptions",
  "ext",
  "load",
  "loads",
  "os",
  "pack",
  "packb",
  "unpack",
  "unpackb",
  "version",
  "Library: packaging",
  "__author__",
  "__builtins__",
  "__cached__",
  "__copyright__",
  "__doc__",
  "__email__",
  "__file__",
  "__license__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__summary__",
  "__title__",
  "__uri__",
  "__version__",
  "_elffile",
  "_manylinux",
  "_musllinux",
  "_parser",
  "_structures",
  "_tokenizer",
  "markers",
  "requirements",
  "specifiers",
  "tags",
  "utils",
  "version",
  "Library: parso",
  "load_grammar(*, version: str = None, path: str = None)",
  "parse(code=None, **kwargs)",
  "python_bytes_to_unicode(source: Union[str, bytes], encoding: str = 'utf-8', errors: str = 'strict') -> str",
  "split_lines(string: str, keepends: bool = False) -> Sequence[str]",
  "Grammar",
  "ParserSyntaxError",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_compatibility",
  "cache",
  "file_io",
  "grammar",
  "load_grammar",
  "normalizer",
  "parse",
  "parser",
  "pgen2",
  "python",
  "python_bytes_to_unicode",
  "split_lines",
  "tree",
  "utils",
  "Library: pip",
  "main(args: Optional[List[str]] = None) -> int",
  "List",
  "Optional",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "main",
  "Library: pkginfo",
  "get_metadata(path_or_module, metadata_version=None)",
  "BDist",
  "Develop",
  "Distribution",
  "Index",
  "Installed",
  "SDist",
  "UnpackedSDist",
  "Wheel",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "bdist",
  "develop",
  "distribution",
  "get_metadata",
  "index",
  "installed",
  "sdist",
  "utils",
  "wheel",
  "Library: platformdirs",
  "_set_platform_dir_class() -> 'type[PlatformDirsABC]'",
  "site_cache_dir(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, opinion: 'bool' = True, ensure_exists: 'bool' = False) -> 'str'",
  "site_cache_path(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, opinion: 'bool' = True, ensure_exists: 'bool' = False) -> 'Path'",
  "site_config_dir(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, multipath: 'bool' = False, ensure_exists: 'bool' = False) -> 'str'",
  "site_config_path(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, multipath: 'bool' = False, ensure_exists: 'bool' = False) -> 'Path'",
  "site_data_dir(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, multipath: 'bool' = False, ensure_exists: 'bool' = False) -> 'str'",
  "site_data_path(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, multipath: 'bool' = False, ensure_exists: 'bool' = False) -> 'Path'",
  "site_runtime_dir(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, opinion: 'bool' = True, ensure_exists: 'bool' = False) -> 'str'",
  "site_runtime_path(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, opinion: 'bool' = True, ensure_exists: 'bool' = False) -> 'Path'",
  "user_cache_dir(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, opinion: 'bool' = True, ensure_exists: 'bool' = False) -> 'str'",
  "user_cache_path(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, opinion: 'bool' = True, ensure_exists: 'bool' = False) -> 'Path'",
  "user_config_dir(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, roaming: 'bool' = False, ensure_exists: 'bool' = False) -> 'str'",
  "user_config_path(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, roaming: 'bool' = False, ensure_exists: 'bool' = False) -> 'Path'",
  "user_data_dir(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, roaming: 'bool' = False, ensure_exists: 'bool' = False) -> 'str'",
  "user_data_path(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, roaming: 'bool' = False, ensure_exists: 'bool' = False) -> 'Path'",
  "user_desktop_dir() -> 'str'",
  "user_desktop_path() -> 'Path'",
  "user_documents_dir() -> 'str'",
  "user_documents_path() -> 'Path'",
  "user_downloads_dir() -> 'str'",
  "user_downloads_path() -> 'Path'",
  "user_log_dir(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, opinion: 'bool' = True, ensure_exists: 'bool' = False) -> 'str'",
  "user_log_path(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, opinion: 'bool' = True, ensure_exists: 'bool' = False) -> 'Path'",
  "user_music_dir() -> 'str'",
  "user_music_path() -> 'Path'",
  "user_pictures_dir() -> 'str'",
  "user_pictures_path() -> 'Path'",
  "user_runtime_dir(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, opinion: 'bool' = True, ensure_exists: 'bool' = False) -> 'str'",
  "user_runtime_path(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, opinion: 'bool' = True, ensure_exists: 'bool' = False) -> 'Path'",
  "user_state_dir(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, roaming: 'bool' = False, ensure_exists: 'bool' = False) -> 'str'",
  "user_state_path(appname: 'str | None' = None, appauthor: 'str | None | Literal[False]' = None, version: 'str | None' = None, roaming: 'bool' = False, ensure_exists: 'bool' = False) -> 'Path'",
  "user_videos_dir() -> 'str'",
  "user_videos_path() -> 'Path'",
  "AppDirs",
  "PlatformDirs",
  "PlatformDirsABC",
  "TYPE_CHECKING",
  "_Result",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "__version_info__",
  "_set_platform_dir_class",
  "annotations",
  "api",
  "os",
  "site_cache_dir",
  "site_cache_path",
  "site_config_dir",
  "site_config_path",
  "site_data_dir",
  "site_data_path",
  "site_runtime_dir",
  "site_runtime_path",
  "sys",
  "user_cache_dir",
  "user_cache_path",
  "user_config_dir",
  "user_config_path",
  "user_data_dir",
  "user_data_path",
  "user_desktop_dir",
  "user_desktop_path",
  "user_documents_dir",
  "user_documents_path",
  "user_downloads_dir",
  "user_downloads_path",
  "user_log_dir",
  "user_log_path",
  "user_music_dir",
  "user_music_path",
  "user_pictures_dir",
  "user_pictures_path",
  "user_runtime_dir",
  "user_runtime_path",
  "user_state_dir",
  "user_state_path",
  "user_videos_dir",
  "user_videos_path",
  "version",
  "windows",
  "Library: poetry",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "Library: psutil",
  "_check_conn_kind(kind)",
  "_cpu_busy_time(times)",
  "_cpu_times_deltas(t1, t2)",
  "_cpu_tot_time(times)",
  "_pprint_secs(secs)",
  "_set_debug(value)",
  "_wrap_numbers(input_dict, name)",
  "boot_time()",
  "cpu_count(logical=True)",
  "cpu_freq(percpu=False)",
  "cpu_percent(interval=None, percpu=False)",
  "cpu_stats()",
  "cpu_times(percpu=False)",
  "cpu_times_percent(interval=None, percpu=False)",
  "debug(msg)",
  "disk_io_counters(perdisk=False, nowrap=True)",
  "disk_partitions(all=False)",
  "disk_usage(path)",
  "getloadavg()",
  "net_connections(kind='inet')",
  "net_if_addrs()",
  "net_if_stats()",
  "net_io_counters(pernic=False, nowrap=True)",
  "pid_exists(pid)",
  "pids()",
  "process_iter(attrs=None, ad_value=None)",
  "sensors_battery()",
  "swap_memory()",
  "users()",
  "virtual_memory()",
  "wait_procs(procs, timeout=None, callback=None)",
  "win_service_get(name)",
  "win_service_iter()",
  "ABOVE_NORMAL_PRIORITY_CLASS",
  "AF_LINK",
  "AIX",
  "AccessDenied",
  "BELOW_NORMAL_PRIORITY_CLASS",
  "BSD",
  "CONN_CLOSE",
  "CONN_CLOSE_WAIT",
  "CONN_CLOSING",
  "CONN_DELETE_TCB",
  "CONN_ESTABLISHED",
  "CONN_FIN_WAIT1",
  "CONN_FIN_WAIT2",
  "CONN_LAST_ACK",
  "CONN_LISTEN",
  "CONN_NONE",
  "CONN_SYN_RECV",
  "CONN_SYN_SENT",
  "CONN_TIME_WAIT",
  "Error",
  "FREEBSD",
  "HIGH_PRIORITY_CLASS",
  "IDLE_PRIORITY_CLASS",
  "IOPRIO_HIGH",
  "IOPRIO_LOW",
  "IOPRIO_NORMAL",
  "IOPRIO_VERYLOW",
  "LINUX",
  "MACOS",
  "NETBSD",
  "NIC_DUPLEX_FULL",
  "NIC_DUPLEX_HALF",
  "NIC_DUPLEX_UNKNOWN",
  "NORMAL_PRIORITY_CLASS",
  "NoSuchProcess",
  "OPENBSD",
  "OSX",
  "POSIX",
  "POWER_TIME_UNKNOWN",
  "POWER_TIME_UNLIMITED",
  "Popen",
  "Process",
  "REALTIME_PRIORITY_CLASS",
  "STATUS_DEAD",
  "STATUS_DISK_SLEEP",
  "STATUS_IDLE",
  "STATUS_LOCKED",
  "STATUS_PARKED",
  "STATUS_RUNNING",
  "STATUS_SLEEPING",
  "STATUS_STOPPED",
  "STATUS_TRACING_STOP",
  "STATUS_WAITING",
  "STATUS_WAKING",
  "STATUS_ZOMBIE",
  "SUNOS",
  "TimeoutExpired",
  "WINDOWS",
  "ZombieProcess",
  "_LOWEST_PID",
  "_SENTINEL",
  "_TOTAL_PHYMEM",
  "__all__",
  "__author__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_as_dict_attrnames",
  "_check_conn_kind",
  "_common",
  "_cpu_busy_time",
  "_cpu_times_deltas",
  "_cpu_tot_time",
  "_last_cpu_times",
  "_last_cpu_times_2",
  "_last_per_cpu_times",
  "_last_per_cpu_times_2",
  "_pids_reused",
  "_pmap",
  "_ppid_map",
  "_pprint_secs",
  "_psplatform",
  "_psutil_windows",
  "_pswindows",
  "_set_debug",
  "_timer",
  "_wrap_numbers",
  "boot_time",
  "collections",
  "contextlib",
  "cpu_count",
  "cpu_freq",
  "cpu_percent",
  "cpu_stats",
  "cpu_times",
  "cpu_times_percent",
  "datetime",
  "debug",
  "disk_io_counters",
  "disk_partitions",
  "disk_usage",
  "functools",
  "getloadavg",
  "net_connections",
  "net_if_addrs",
  "net_if_stats",
  "net_io_counters",
  "os",
  "pid_exists",
  "pids",
  "process_iter",
  "pwd",
  "sensors_battery",
  "signal",
  "socket",
  "subprocess",
  "swap_memory",
  "sys",
  "threading",
  "time",
  "users",
  "version_info",
  "virtual_memory",
  "wait_procs",
  "win_service_get",
  "win_service_iter",
  "Library: pygments",
  "format(tokens, formatter, outfile=None)",
  "highlight(code, lexer, formatter, outfile=None)",
  "lex(code, lexer)",
  "BytesIO",
  "StringIO",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__docformat__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "format",
  "highlight",
  "lex",
  "lexers",
  "modeline",
  "plugin",
  "util",
  "Library: rapidfuzz",
  "get_include()",
  "__all__",
  "__annotations__",
  "__author__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__license__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_common_py",
  "_feature_detector",
  "_feature_detector_cpp",
  "_utils",
  "annotations",
  "distance",
  "fuzz",
  "fuzz_cpp_avx2",
  "fuzz_py",
  "get_include",
  "process",
  "process_cpp",
  "process_cpp_impl",
  "utils",
  "utils_cpp",
  "utils_py",
  "Library: requests",
  "_check_cryptography(cryptography_version)",
  "check_compatibility(urllib3_version, chardet_version, charset_normalizer_version)",
  "delete(url, **kwargs)",
  "get(url, params=None, **kwargs)",
  "head(url, **kwargs)",
  "options(url, **kwargs)",
  "patch(url, data=None, **kwargs)",
  "post(url, data=None, json=None, **kwargs)",
  "put(url, data=None, **kwargs)",
  "request(method, url, **kwargs)",
  "session()",
  "ConnectTimeout",
  "ConnectionError",
  "DependencyWarning",
  "FileModeWarning",
  "HTTPError",
  "JSONDecodeError",
  "NullHandler",
  "PreparedRequest",
  "ReadTimeout",
  "Request",
  "RequestException",
  "RequestsDependencyWarning",
  "Response",
  "Session",
  "Timeout",
  "TooManyRedirects",
  "URLRequired",
  "__author__",
  "__author_email__",
  "__build__",
  "__builtins__",
  "__cached__",
  "__cake__",
  "__copyright__",
  "__description__",
  "__doc__",
  "__file__",
  "__license__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__title__",
  "__url__",
  "__version__",
  "_check_cryptography",
  "_internal_utils",
  "adapters",
  "api",
  "auth",
  "certs",
  "chardet_version",
  "charset_normalizer_version",
  "check_compatibility",
  "codes",
  "compat",
  "cookies",
  "delete",
  "exceptions",
  "get",
  "head",
  "hooks",
  "logging",
  "models",
  "options",
  "packages",
  "patch",
  "post",
  "put",
  "request",
  "session",
  "sessions",
  "ssl",
  "status_codes",
  "structures",
  "urllib3",
  "utils",
  "warnings",
  "Library: shellingham",
  "detect_shell(pid=None, max_depth=10)",
  "ShellDetectionFailure",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_core",
  "detect_shell",
  "importlib",
  "os",
  "Library: six",
  "_add_doc(func, doc)",
  "_import_module(name)",
  "add_metaclass(metaclass)",
  "add_move(move)",
  "assertCountEqual(self, *args, **kwargs)",
  "assertNotRegex(self, *args, **kwargs)",
  "assertRaisesRegex(self, *args, **kwargs)",
  "assertRegex(self, *args, **kwargs)",
  "b(s)",
  "create_unbound_method(func, cls)",
  "ensure_binary(s, encoding='utf-8', errors='strict')",
  "ensure_str(s, encoding='utf-8', errors='strict')",
  "ensure_text(s, encoding='utf-8', errors='strict')",
  "get_unbound_function(unbound)",
  "iteritems(d, **kw)",
  "iterkeys(d, **kw)",
  "iterlists(d, **kw)",
  "itervalues(d, **kw)",
  "python_2_unicode_compatible(klass)",
  "raise_from(value, from_value)",
  "remove_move(name)",
  "reraise(tp, value, tb=None)",
  "spec_from_loader(name, loader, *, origin=None, is_package=None)",
  "u(s)",
  "with_metaclass(meta, *bases)",
  "wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))",
  "BytesIO",
  "Iterator",
  "MAXSIZE",
  "Module_six_moves_urllib",
  "Module_six_moves_urllib_error",
  "Module_six_moves_urllib_parse",
  "Module_six_moves_urllib_request",
  "Module_six_moves_urllib_response",
  "Module_six_moves_urllib_robotparser",
  "MovedAttribute",
  "MovedModule",
  "PY2",
  "PY3",
  "PY34",
  "StringIO",
  "_LazyDescr",
  "_LazyModule",
  "_MovedItems",
  "_SixMetaPathImporter",
  "__author__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_add_doc",
  "_assertCountEqual",
  "_assertNotRegex",
  "_assertRaisesRegex",
  "_assertRegex",
  "_func_closure",
  "_func_code",
  "_func_defaults",
  "_func_globals",
  "_import_module",
  "_importer",
  "_meth_func",
  "_meth_self",
  "_moved_attributes",
  "_urllib_error_moved_attributes",
  "_urllib_parse_moved_attributes",
  "_urllib_request_moved_attributes",
  "_urllib_response_moved_attributes",
  "_urllib_robotparser_moved_attributes",
  "absolute_import",
  "add_metaclass",
  "add_move",
  "advance_iterator",
  "assertCountEqual",
  "assertNotRegex",
  "assertRaisesRegex",
  "assertRegex",
  "b",
  "binary_type",
  "byte2int",
  "callable",
  "class_types",
  "create_bound_method",
  "create_unbound_method",
  "ensure_binary",
  "ensure_str",
  "ensure_text",
  "exec_",
  "functools",
  "get_function_closure",
  "get_function_code",
  "get_function_defaults",
  "get_function_globals",
  "get_method_function",
  "get_method_self",
  "get_unbound_function",
  "indexbytes",
  "int2byte",
  "integer_types",
  "iterbytes",
  "iteritems",
  "iterkeys",
  "iterlists",
  "itertools",
  "itervalues",
  "moves",
  "next",
  "operator",
  "print_",
  "python_2_unicode_compatible",
  "raise_from",
  "remove_move",
  "reraise",
  "spec_from_loader",
  "string_types",
  "sys",
  "text_type",
  "types",
  "u",
  "unichr",
  "viewitems",
  "viewkeys",
  "viewvalues",
  "with_metaclass",
  "wraps",
  "Library: sniffio",
  "current_async_library() -> str",
  "AsyncLibraryNotFoundError",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_impl",
  "_version",
  "current_async_library",
  "current_async_library_cvar",
  "thread_local",
  "Library: tomlkit",
  "aot() -> 'AoT'",
  "array(raw: 'str' = '[]') -> 'Array'",
  "boolean(raw: 'str') -> 'Bool'",
  "comment(string: 'str') -> 'Comment'",
  "date(raw: 'str') -> 'Date'",
  "datetime(raw: 'str') -> 'DateTime'",
  "document() -> 'TOMLDocument'",
  "dump(data: 'Mapping', fp: 'IO[str]', *, sort_keys: 'bool' = False) -> 'None'",
  "dumps(data: 'Mapping', sort_keys: 'bool' = False) -> 'str'",
  "float_(raw: 'str | float') -> 'Float'",
  "inline_table() -> 'InlineTable'",
  "integer(raw: 'str | int') -> 'Integer'",
  "item(value: 'Any', _parent: 'Item | None' = None, _sort_keys: 'bool' = False) -> 'Item'",
  "key(k: 'str | Iterable[str]') -> 'Key'",
  "key_value(src: 'str') -> 'tuple[Key, _Item]'",
  "load(fp: 'IO[str] | IO[bytes]') -> 'TOMLDocument'",
  "loads(string: 'str | bytes') -> 'TOMLDocument'",
  "nl() -> 'Whitespace'",
  "parse(string: 'str | bytes') -> 'TOMLDocument'",
  "register_encoder(encoder: 'E') -> 'E'",
  "string(raw: 'str', *, literal: 'bool' = False, multiline: 'bool' = False, escape: 'bool' = True) -> 'String'",
  "table(is_super_table: 'bool | None' = None) -> 'Table'",
  "time(raw: 'str') -> 'Time'",
  "unregister_encoder(encoder: 'Encoder') -> 'None'",
  "value(raw: 'str') -> '_Item'",
  "ws(src: 'str') -> 'Whitespace'",
  "TOMLDocument",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_compat",
  "_types",
  "_utils",
  "aot",
  "api",
  "array",
  "boolean",
  "comment",
  "container",
  "date",
  "datetime",
  "document",
  "dump",
  "dumps",
  "exceptions",
  "float_",
  "inline_table",
  "integer",
  "item",
  "items",
  "key",
  "key_value",
  "load",
  "loads",
  "nl",
  "parse",
  "parser",
  "register_encoder",
  "source",
  "string",
  "table",
  "time",
  "toml_char",
  "toml_document",
  "unregister_encoder",
  "value",
  "ws",
  "Library: tornado",
  "__getattr__(name: str) -> Any",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__getattr__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "concurrent",
  "escape",
  "importlib",
  "ioloop",
  "log",
  "speedups",
  "typing",
  "util",
  "version",
  "version_info",
  "Library: traitlets",
  "default(name: 'str') -> 'DefaultHandler'",
  "import_item(name: 'str') -> 'Any'",
  "observe(*names: 'Sentinel | str', type: 'str' = 'change') -> 'ObserveHandler'",
  "observe_compat(func: 'FuncT') -> 'FuncT'",
  "parse_notifier_name(names: 'Sentinel | str | t.Iterable[Sentinel | str]') -> 't.Iterable[t.Any]'",
  "signature_has_traits(cls: 'Type[T]') -> 'Type[T]'",
  "validate(*names: 'Sentinel | str') -> 'ValidateHandler'",
  "warn(msg: 'str', category: 't.Any', *, stacklevel: 'int', source: 't.Any' = None) -> 'None'",
  "All",
  "Any",
  "BaseDescriptor",
  "Bool",
  "Bunch",
  "Bytes",
  "CBool",
  "CBytes",
  "CComplex",
  "CFloat",
  "CInt",
  "CLong",
  "CRegExp",
  "CUnicode",
  "Callable",
  "CaselessStrEnum",
  "ClassBasedTraitType",
  "Complex",
  "Container",
  "DefaultHandler",
  "Dict",
  "DottedObjectName",
  "Enum",
  "EventHandler",
  "Float",
  "ForwardDeclaredInstance",
  "ForwardDeclaredMixin",
  "ForwardDeclaredType",
  "FuzzyEnum",
  "HasDescriptors",
  "HasTraits",
  "Instance",
  "Int",
  "Integer",
  "List",
  "Long",
  "MetaHasDescriptors",
  "MetaHasTraits",
  "ObjectName",
  "ObserveHandler",
  "Sentinel",
  "Set",
  "TCPAddress",
  "This",
  "TraitError",
  "TraitType",
  "Tuple",
  "Type",
  "Undefined",
  "Unicode",
  "Union",
  "UseEnum",
  "ValidateHandler",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_t",
  "_version",
  "annotations",
  "config",
  "default",
  "directional_link",
  "dlink",
  "import_item",
  "link",
  "log",
  "observe",
  "observe_compat",
  "parse_notifier_name",
  "signature_has_traits",
  "traitlets",
  "utils",
  "validate",
  "version_info",
  "warn",
  "Library: urllib3",
  "add_stderr_logger(level: 'int' = 10) -> 'logging.StreamHandler[typing.TextIO]'",
  "connection_from_url(url: 'str', **kw: 'typing.Any') -> 'HTTPConnectionPool'",
  "disable_warnings(category: 'type[Warning]' = <class 'urllib3.exceptions.HTTPWarning'>) -> 'None'",
  "encode_multipart_formdata(fields: '_TYPE_FIELDS', boundary: 'str | None' = None) -> 'tuple[bytes, str]'",
  "make_headers(keep_alive: 'bool | None' = None, accept_encoding: 'bool | list[str] | str | None' = None, user_agent: 'str | None' = None, basic_auth: 'str | None' = None, proxy_basic_auth: 'str | None' = None, disable_cache: 'bool | None' = None) -> 'dict[str, str]'",
  "proxy_from_url(url: 'str', **kw: 'typing.Any') -> 'ProxyManager'",
  "request(method: 'str', url: 'str', *, body: '_TYPE_BODY | None' = None, fields: '_TYPE_FIELDS | None' = None, headers: 'typing.Mapping[str, str] | None' = None, preload_content: 'bool | None' = True, decode_content: 'bool | None' = True, redirect: 'bool | None' = True, retries: 'Retry | bool | int | None' = None, timeout: 'Timeout | float | int | None' = 3, json: 'typing.Any | None' = None) -> 'BaseHTTPResponse'",
  "BaseHTTPResponse",
  "HTTPConnectionPool",
  "HTTPHeaderDict",
  "HTTPResponse",
  "HTTPSConnectionPool",
  "PoolManager",
  "ProxyManager",
  "Retry",
  "Timeout",
  "_DEFAULT_POOL",
  "_TYPE_BODY",
  "_TYPE_FIELDS",
  "__all__",
  "__author__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__license__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_base_connection",
  "_collections",
  "_request_methods",
  "_version",
  "add_stderr_logger",
  "annotations",
  "connection",
  "connection_from_url",
  "connectionpool",
  "contrib",
  "disable_warnings",
  "encode_multipart_formdata",
  "exceptions",
  "fields",
  "filepost",
  "http2",
  "logging",
  "make_headers",
  "poolmanager",
  "proxy_from_url",
  "request",
  "response",
  "ssl",
  "sys",
  "typing",
  "util",
  "warnings",
  "Library: virtualenv",
  "cli_run(args, options=None, setup_logging=True, env=None)",
  "session_via_cli(args, options=None, setup_logging=True, env=None)",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "annotations",
  "app_data",
  "cli_run",
  "config",
  "create",
  "discovery",
  "info",
  "report",
  "run",
  "seed",
  "session_via_cli",
  "util",
  "version",
  "Library: wcwidth",
  "_bisearch(ucs, table)",
  "list_versions()",
  "wcswidth(pwcs, n=None, unicode_version='auto')",
  "VS16_NARROW_TO_WIDE",
  "WIDE_EASTASIAN",
  "ZERO_WIDTH",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_bisearch",
  "_wcmatch_version",
  "_wcversion_value",
  "list_versions",
  "table_vs16",
  "table_wide",
  "table_zero",
  "unicode_versions",
  "wcswidth",
  "wcwidth",
  "Library: werkzeug",
  "run_simple(hostname: 'str', port: 'int', application: 'WSGIApplication', use_reloader: 'bool' = False, use_debugger: 'bool' = False, use_evalex: 'bool' = True, extra_files: 't.Iterable[str] | None' = None, exclude_patterns: 't.Iterable[str] | None' = None, reloader_interval: 'int' = 1, reloader_type: 'str' = 'auto', threaded: 'bool' = False, processes: 'int' = 1, request_handler: 'type[WSGIRequestHandler] | None' = None, static_files: 'dict[str, str | tuple[str, str]] | None' = None, passthrough_errors: 'bool' = False, ssl_context: '_TSSLContextArg | None' = None) -> 'None'",
  "Client",
  "Request",
  "Response",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_internal",
  "datastructures",
  "exceptions",
  "formparser",
  "http",
  "local",
  "routing",
  "run_simple",
  "sansio",
  "security",
  "serving",
  "test",
  "urls",
  "user_agent",
  "utils",
  "wrappers",
  "wsgi",
  "Library: zipp",
  "_ancestry(path)",
  "_difference(minuend, subtrahend)",
  "_extract_text_encoding(encoding=None, *args, **kwargs)",
  "_parents(path)",
  "save_method_args(method)",
  "CompleteDirs",
  "FastLookup",
  "InitializedState",
  "Path",
  "Translator",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_ancestry",
  "_dedupe",
  "_difference",
  "_extract_text_encoding",
  "_functools",
  "_parents",
  "compat",
  "functools",
  "glob",
  "io",
  "itertools",
  "pathlib",
  "posixpath",
  "re",
  "save_method_args",
  "stat",
  "sys",
  "text_encoding",
  "zipfile",
  "Library: zstandard",
  "compress(data: ByteString, level: int = 3) -> bytes",
  "decompress(data: ByteString, max_output_size: int = 0) -> bytes",
  "open(filename, mode='rb', cctx=None, dctx=None, encoding=None, errors=None, newline=None, closefd=None)",
  "BLOCKSIZELOG_MAX",
  "BLOCKSIZE_MAX",
  "BufferSegment",
  "BufferSegments",
  "BufferWithSegments",
  "BufferWithSegmentsCollection",
  "ByteString",
  "CHAINLOG_MAX",
  "CHAINLOG_MIN",
  "COMPRESSION_RECOMMENDED_INPUT_SIZE",
  "COMPRESSION_RECOMMENDED_OUTPUT_SIZE",
  "COMPRESSOBJ_FLUSH_BLOCK",
  "COMPRESSOBJ_FLUSH_FINISH",
  "CONTENTSIZE_ERROR",
  "CONTENTSIZE_UNKNOWN",
  "DECOMPRESSION_RECOMMENDED_INPUT_SIZE",
  "DECOMPRESSION_RECOMMENDED_OUTPUT_SIZE",
  "DICT_TYPE_AUTO",
  "DICT_TYPE_FULLDICT",
  "DICT_TYPE_RAWCONTENT",
  "FLUSH_BLOCK",
  "FLUSH_FRAME",
  "FORMAT_ZSTD1",
  "FORMAT_ZSTD1_MAGICLESS",
  "FRAME_HEADER",
  "FrameParameters",
  "HASHLOG_MAX",
  "HASHLOG_MIN",
  "LDM_BUCKETSIZELOG_MAX",
  "LDM_MINMATCH_MAX",
  "LDM_MINMATCH_MIN",
  "MAGIC_NUMBER",
  "MAX_COMPRESSION_LEVEL",
  "MINMATCH_MAX",
  "MINMATCH_MIN",
  "SEARCHLENGTH_MAX",
  "SEARCHLENGTH_MIN",
  "SEARCHLOG_MAX",
  "SEARCHLOG_MIN",
  "STRATEGY_BTLAZY2",
  "STRATEGY_BTOPT",
  "STRATEGY_BTULTRA",
  "STRATEGY_BTULTRA2",
  "STRATEGY_DFAST",
  "STRATEGY_FAST",
  "STRATEGY_GREEDY",
  "STRATEGY_LAZY",
  "STRATEGY_LAZY2",
  "TARGETLENGTH_MAX",
  "TARGETLENGTH_MIN",
  "WINDOWLOG_MAX",
  "WINDOWLOG_MIN",
  "ZSTD_VERSION",
  "ZstdCompressionDict",
  "ZstdCompressionParameters",
  "ZstdCompressionReader",
  "ZstdCompressionWriter",
  "ZstdCompressor",
  "ZstdDecompressionReader",
  "ZstdDecompressionWriter",
  "ZstdDecompressor",
  "ZstdError",
  "_MODE_CLOSED",
  "_MODE_READ",
  "_MODE_WRITE",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_module_policy",
  "absolute_import",
  "backend",
  "backend_c",
  "backend_features",
  "builtins",
  "compress",
  "decompress",
  "estimate_decompression_context_size",
  "frame_content_size",
  "frame_header_size",
  "get_frame_parameters",
  "io",
  "open",
  "os",
  "platform",
  "train_dictionary",
  "unicode_literals",
  "Library: autocommand",
  "autoasync(coro=None, *, loop=None, forever=False, pass_loop=False)",
  "autocommand(module, *, description=None, epilog=None, add_nos=False, parser=None, loop=None, forever=False, pass_loop=False)",
  "automain(module, *, args=(), kwargs=None)",
  "autoparse(func=None, *, description=None, epilog=None, add_nos=False, parser=None)",
  "smart_open(filename_or_file, *args, **kwargs)",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "autoasync",
  "autocommand",
  "automain",
  "autoparse",
  "errors",
  "smart_open",
  "Library: inflect",
  "bysize(words: 'Iterable[str]') -> 'Dict[int, set]'",
  "cast(typ, val)",
  "enclose(s: 'str') -> 'str'",
  "get_si_pron(thecase, word, gender) -> 'str'",
  "joinstem(cutpoint: 'Optional[int]' = 0, words: 'Optional[Iterable[str]]' = None) -> 'str'",
  "make_pl_si_lists(lst: 'Iterable[str]', plending: 'str', siendingsize: 'Optional[int]', dojoinstem: 'bool' = True)",
  "typechecked(target: 'T_CallableOrType | None' = None, *, forward_ref_policy: 'ForwardRefPolicy | Unset' = <unset>, typecheck_fail_callback: 'TypeCheckFailCallback | Unset' = <unset>, collection_check_strategy: 'CollectionCheckStrategy | Unset' = <unset>, debug_instrumentation: 'bool | Unset' = <unset>) -> 'Any'",
  "windowed_complete(iterable, n)",
  "ARTICLE_SPECIAL_EU",
  "ARTICLE_SPECIAL_ONCE",
  "ARTICLE_SPECIAL_ONETIME",
  "ARTICLE_SPECIAL_UBA",
  "ARTICLE_SPECIAL_UKR",
  "ARTICLE_SPECIAL_UNIT",
  "A_abbrev",
  "A_explicit_a",
  "A_explicit_an",
  "A_ordinal_a",
  "A_ordinal_an",
  "A_y_cons",
  "Annotated",
  "Any",
  "BadChunkingOptionError",
  "BadGenderError",
  "BadNumValueError",
  "BadRcFileError",
  "BadUserDefinedPatternError",
  "COMMA_WORD",
  "CONSONANTS",
  "Callable",
  "DENOMINATOR",
  "DIGIT",
  "DIGIT_GROUP",
  "DOLLAR_DIGITS",
  "Dict",
  "ENDS_WITH_APOSTROPHE_S",
  "ENDS_WITH_S",
  "FOUR_DIGIT_COMMA",
  "FUNCTION_CALL",
  "Falsish",
  "INDEFINITE_ARTICLE_TEST",
  "Iterable",
  "List",
  "Literal",
  "Match",
  "NON_DIGIT",
  "NumOutOfRangeError",
  "Number",
  "ONE_DIGIT_WORD",
  "Optional",
  "PARTITION_WORD",
  "PLVERB_SPECIAL_S_RE",
  "PL_SB_POSTFIX_ADJ_STEMS_RE",
  "PL_SB_PREP_DUAL_COMPOUND_RE",
  "PRESENT_PARTICIPLE_REPLACEMENTS",
  "SPECIAL_A",
  "SPECIAL_ABBREV_A",
  "SPECIAL_ABBREV_AN",
  "SPECIAL_AN",
  "SPECIAL_CAPITALS",
  "Sequence",
  "THREE_DIGITS",
  "THREE_DIGITS_WORD",
  "TWO_DIGITS",
  "TWO_DIGITS_WORD",
  "TYPE_CHECKING",
  "Tuple",
  "Union",
  "UnknownClassicalModeError",
  "VOWELS",
  "WHITESPACE",
  "WHITESPACES",
  "WHITESPACES_COMMA",
  "Word",
  "Words",
  "_STATIC_TYPE_CHECKING",
  "_WordMeta",
  "__annotations__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_gend",
  "_pl_sb_postfix_adj_defn",
  "_plur",
  "_sing",
  "_thecase",
  "all_classical",
  "annotations",
  "ast",
  "bysize",
  "cast",
  "collections",
  "compat",
  "contextlib",
  "def_classical",
  "enclose",
  "engine",
  "functools",
  "get_si_pron",
  "itertools",
  "joinstem",
  "k",
  "k1",
  "k2",
  "make_pl_si_lists",
  "mill",
  "no_classical",
  "nth",
  "nth_suff",
  "ordinal",
  "ordinal_suff",
  "pl_adj_poss",
  "pl_adj_poss_keys",
  "pl_adj_special",
  "pl_adj_special_keys",
  "pl_count_one",
  "pl_count_zero",
  "pl_prep",
  "pl_prep_bysize",
  "pl_prep_list",
  "pl_prep_list_da",
  "pl_pron_acc",
  "pl_pron_acc_keys",
  "pl_pron_acc_keys_bysize",
  "pl_pron_nom",
  "pl_sb_C_a_ae",
  "pl_sb_C_a_ae_bysize",
  "pl_sb_C_a_ae_list",
  "pl_sb_C_a_ata",
  "pl_sb_C_a_ata_bysize",
  "pl_sb_C_a_ata_list",
  "pl_sb_C_en_ina",
  "pl_sb_C_en_ina_bysize",
  "pl_sb_C_en_ina_list",
  "pl_sb_C_ex_ices",
  "pl_sb_C_ex_ices_bysize",
  "pl_sb_C_ex_ices_list",
  "pl_sb_C_i",
  "pl_sb_C_i_bysize",
  "pl_sb_C_i_list",
  "pl_sb_C_im",
  "pl_sb_C_im_bysize",
  "pl_sb_C_im_list",
  "pl_sb_C_is_ides",
  "pl_sb_C_is_ides_bysize",
  "pl_sb_C_is_ides_complete",
  "pl_sb_C_is_ides_endings",
  "pl_sb_C_is_ides_list",
  "pl_sb_C_ix_ices",
  "pl_sb_C_ix_ices_bysize",
  "pl_sb_C_ix_ices_list",
  "pl_sb_C_o_i",
  "pl_sb_C_o_i_bysize",
  "pl_sb_C_o_i_stems",
  "pl_sb_C_on_a",
  "pl_sb_C_on_a_bysize",
  "pl_sb_C_on_a_list",
  "pl_sb_C_um_a",
  "pl_sb_C_um_a_bysize",
  "pl_sb_C_um_a_list",
  "pl_sb_C_us_i",
  "pl_sb_C_us_i_bysize",
  "pl_sb_C_us_i_list",
  "pl_sb_C_us_us",
  "pl_sb_C_us_us_bysize",
  "pl_sb_U_a_ae",
  "pl_sb_U_a_ae_bysize",
  "pl_sb_U_a_ae_list",
  "pl_sb_U_ch_chs",
  "pl_sb_U_ch_chs_bysize",
  "pl_sb_U_ch_chs_list",
  "pl_sb_U_ex_ices",
  "pl_sb_U_ex_ices_bysize",
  "pl_sb_U_ex_ices_list",
  "pl_sb_U_ix_ices",
  "pl_sb_U_ix_ices_bysize",
  "pl_sb_U_ix_ices_list",
  "pl_sb_U_louse_lice_bysize",
  "pl_sb_U_louse_lice_list",
  "pl_sb_U_man_mans_bysize",
  "pl_sb_U_man_mans_caps_bysize",
  "pl_sb_U_man_mans_caps_list",
  "pl_sb_U_man_mans_list",
  "pl_sb_U_o_os_bysize",
  "pl_sb_U_o_os_complete",
  "pl_sb_U_o_os_endings",
  "pl_sb_U_on_a",
  "pl_sb_U_on_a_bysize",
  "pl_sb_U_on_a_list",
  "pl_sb_U_um_a",
  "pl_sb_U_um_a_bysize",
  "pl_sb_U_um_a_list",
  "pl_sb_U_us_i",
  "pl_sb_U_us_i_bysize",
  "pl_sb_U_us_i_list",
  "pl_sb_irregular",
  "pl_sb_irregular_caps",
  "pl_sb_irregular_compound",
  "pl_sb_irregular_s",
  "pl_sb_postfix_adj",
  "pl_sb_postfix_adj_stems",
  "pl_sb_prep_dual_compound",
  "pl_sb_singular_s",
  "pl_sb_singular_s_bysize",
  "pl_sb_singular_s_complete",
  "pl_sb_singular_s_endings",
  "pl_sb_singular_s_es",
  "pl_sb_uninflected_bysize",
  "pl_sb_uninflected_caps",
  "pl_sb_uninflected_complete",
  "pl_sb_uninflected_endings",
  "pl_sb_uninflected_herd",
  "pl_sb_uninflected_s",
  "pl_sb_uninflected_s_complete",
  "pl_sb_uninflected_s_endings",
  "pl_sb_z_zes_bysize",
  "pl_sb_z_zes_list",
  "pl_sb_ze_zes_bysize",
  "pl_sb_ze_zes_list",
  "pl_v_oes_oe",
  "pl_v_oes_oe_endings_size4",
  "pl_v_oes_oe_endings_size5",
  "plverb_ambiguous_non_pres",
  "plverb_ambiguous_pres",
  "plverb_ambiguous_pres_keys",
  "plverb_irregular_non_pres",
  "plverb_irregular_pres",
  "plverb_special_s",
  "re",
  "si_pron",
  "si_pron_acc_keys",
  "si_pron_acc_keys_bysize",
  "si_sb_C_a_ae_bysize",
  "si_sb_C_a_ae_list",
  "si_sb_C_a_ata_bysize",
  "si_sb_C_a_ata_list",
  "si_sb_C_en_ina_bysize",
  "si_sb_C_en_ina_list",
  "si_sb_C_ex_ices_bysize",
  "si_sb_C_ex_ices_list",
  "si_sb_C_i_bysize",
  "si_sb_C_i_list",
  "si_sb_C_im_bysize",
  "si_sb_C_im_list",
  "si_sb_C_is_ides_bysize",
  "si_sb_C_is_ides_list",
  "si_sb_C_ix_ices_bysize",
  "si_sb_C_ix_ices_list",
  "si_sb_C_o_i_bysize",
  "si_sb_C_on_a_bysize",
  "si_sb_C_on_a_list",
  "si_sb_C_um_a_bysize",
  "si_sb_C_um_a_list",
  "si_sb_C_us_i_bysize",
  "si_sb_C_us_i_list",
  "si_sb_U_a_ae_bysize",
  "si_sb_U_a_ae_list",
  "si_sb_U_ch_chs_bysize",
  "si_sb_U_ch_chs_list",
  "si_sb_U_ex_ices_bysize",
  "si_sb_U_ex_ices_list",
  "si_sb_U_ix_ices_bysize",
  "si_sb_U_ix_ices_list",
  "si_sb_U_louse_lice_bysize",
  "si_sb_U_louse_lice_list",
  "si_sb_U_man_mans_bysize",
  "si_sb_U_man_mans_caps_bysize",
  "si_sb_U_man_mans_caps_list",
  "si_sb_U_man_mans_list",
  "si_sb_U_o_os_bysize",
  "si_sb_U_o_os_complete",
  "si_sb_U_on_a_bysize",
  "si_sb_U_on_a_list",
  "si_sb_U_um_a_bysize",
  "si_sb_U_um_a_list",
  "si_sb_U_us_i_bysize",
  "si_sb_U_us_i_list",
  "si_sb_ches_che",
  "si_sb_ches_che_case",
  "si_sb_es_is",
  "si_sb_ies_ie",
  "si_sb_ies_ie_case",
  "si_sb_irregular",
  "si_sb_irregular_caps",
  "si_sb_irregular_compound",
  "si_sb_oes_oe",
  "si_sb_oes_oe_case",
  "si_sb_ois_oi_case",
  "si_sb_singular_s_bysize",
  "si_sb_singular_s_complete",
  "si_sb_singular_s_endings",
  "si_sb_sses_sse",
  "si_sb_sses_sse_case",
  "si_sb_uses_use",
  "si_sb_uses_use_case",
  "si_sb_ves_ve",
  "si_sb_ves_ve_case",
  "si_sb_xes_xe",
  "si_sb_z_zes",
  "si_sb_zzes_zz",
  "singular_pronoun_genders",
  "string_to_constant",
  "teen",
  "ten",
  "typechecked",
  "unit",
  "windowed_complete",
  "Library: jaraco.collections",
  "__identity(x)",
  "_dispatch(obj: '_Matchable') -> 'Callable'",
  "dict_map(function, dictionary)",
  "invert_map(map)",
  "overload(func)",
  "pop_all(items)",
  "sorted_items(d, key=<function __identity at 0x00000183269093A0>, reverse=False)",
  "Accumulator",
  "Any",
  "BijectiveMap",
  "Callable",
  "Container",
  "Dict",
  "DictAdapter",
  "DictStack",
  "Enumeration",
  "Everything",
  "FoldedCaseKeyedDict",
  "FreezableDefaultDict",
  "FrozenDict",
  "Greatest",
  "IdentityOverrideMap",
  "InstrumentedDict",
  "ItemsAsAttributes",
  "Iterable",
  "KeyTransformingDict",
  "Least",
  "Mapping",
  "Mask",
  "Projection",
  "RangeMap",
  "TYPE_CHECKING",
  "TypeVar",
  "Union",
  "WeightedLookup",
  "_Matchable",
  "_RangeMapKT",
  "_T",
  "_VT",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__identity",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_dispatch",
  "annotations",
  "collections",
  "copy",
  "dict_map",
  "functools",
  "invert_map",
  "itertools",
  "jaraco",
  "operator",
  "overload",
  "pop_all",
  "random",
  "re",
  "sorted_items",
  "Library: jaraco.text",
  "_(text)",
  "_nonblank(str)",
  "compose(*funcs)",
  "drop_comment(line)",
  "files(package)",
  "indent(string, prefix='    ')",
  "is_binary(value)",
  "is_decodable(value)",
  "join_continuation(lines)",
  "method_cache(method, cache_wrapper=<function lru_cache.<locals>.decorating_function at 0x0000018321CB19E0>)",
  "multi_substitution(*substitutions)",
  "normalize_newlines(text)",
  "read_newlines(filename, limit=1024)",
  "remove_prefix(text, prefix)",
  "remove_suffix(text, suffix)",
  "simple_html_strip(s)",
  "substitution(old, new)",
  "trim(s)",
  "unwrap(s)",
  "wrap(s)",
  "yield_lines(iterable)",
  "ExceptionTrap",
  "FoldedCase",
  "SeparatedValues",
  "Splitter",
  "Stripper",
  "WordSet",
  "_",
  "__annotations__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_nonblank",
  "_unicode_trap",
  "compose",
  "drop_comment",
  "files",
  "functools",
  "indent",
  "is_binary",
  "is_decodable",
  "itertools",
  "join_continuation",
  "lorem_ipsum",
  "method_cache",
  "multi_substitution",
  "normalize_newlines",
  "re",
  "read_newlines",
  "remove_prefix",
  "remove_suffix",
  "simple_html_strip",
  "substitution",
  "textwrap",
  "trim",
  "unwrap",
  "words",
  "wrap",
  "yield_lines",
  "Library: tomli",
  "load(__fp: 'BinaryIO', *, parse_float: 'ParseFloat' = <class 'float'>) -> 'dict[str, Any]'",
  "loads(__s: 'str', *, parse_float: 'ParseFloat' = <class 'float'>) -> 'dict[str, Any]'",
  "TOMLDecodeError",
  "__all__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "_parser",
  "_re",
  "_types",
  "load",
  "loads",
  "Library: typeguard",
  "__getattr__(name: str) -> Any",
  "check_type(value: 'object', expected_type: 'Any', *, forward_ref_policy: 'ForwardRefPolicy' = <ForwardRefPolicy.WARN: 2>, typecheck_fail_callback: 'TypeCheckFailCallback | None' = None, collection_check_strategy: 'CollectionCheckStrategy' = <CollectionCheckStrategy.FIRST_ITEM: 1>) -> 'Any'",
  "check_type_internal(value: 'Any', annotation: 'Any', memo: 'TypeCheckMemo') -> 'None'",
  "install_import_hook(packages: 'Iterable[str] | None' = None, *, cls: 'type[TypeguardFinder]' = <class 'typeguard.TypeguardFinder'>) -> 'ImportHookManager'",
  "load_plugins() -> 'None'",
  "suppress_type_checks(func: 'Callable[P, T] | None' = None) -> 'Callable[P, T] | ContextManager[None]'",
  "typechecked(target: 'T_CallableOrType | None' = None, *, forward_ref_policy: 'ForwardRefPolicy | Unset' = <unset>, typecheck_fail_callback: 'TypeCheckFailCallback | Unset' = <unset>, collection_check_strategy: 'CollectionCheckStrategy | Unset' = <unset>, debug_instrumentation: 'bool | Unset' = <unset>) -> 'Any'",
  "typeguard_ignore(arg)",
  "warn_on_error(exc: 'TypeCheckError', memo: 'TypeCheckMemo') -> 'None'",
  "Any",
  "CollectionCheckStrategy",
  "ForwardRefPolicy",
  "ImportHookManager",
  "InstrumentationWarning",
  "TypeCheckConfiguration",
  "TypeCheckError",
  "TypeCheckFailCallback",
  "TypeCheckLookupCallback",
  "TypeCheckMemo",
  "TypeCheckWarning",
  "TypeCheckerCallable",
  "TypeHintWarning",
  "TypeguardFinder",
  "Unset",
  "__annotations__",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__getattr__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "_checkers",
  "_config",
  "_decorators",
  "_exceptions",
  "_functions",
  "_importhook",
  "_memo",
  "_suppression",
  "_transformer",
  "_utils",
  "check_type",
  "check_type_internal",
  "checker_lookup_functions",
  "install_import_hook",
  "load_plugins",
  "os",
  "suppress_type_checks",
  "typechecked",
  "typeguard_ignore",
  "value",
  "warn_on_error",
  "Library: wheel",
  "__builtins__",
  "__cached__",
  "__doc__",
  "__file__",
  "__loader__",
  "__name__",
  "__package__",
  "__path__",
  "__spec__",
  "__version__",
  "annotations"
]
